%%% -*- erlang-indent-level: 4 -*-
%%%-------------------------------------------------------------------
%%% @copyright (C) 2017, Aeternity Anstalt
%%% @doc Main conductor of the mining
%%%
%% The aec_conductor is the main hub of the mining engine.
%%%
%%% The mining has two states of operation 'running' and 'stopped' Passing the
%%% option {autostart, bool()} to the initialization controls which mode to
%%% start in. In the running mode, block candidates are generated by
%%% `aec_block_generator' and mined in a separate worker. When mining is
%%% successful, the mined block is published and added to the chain if the
%%% state of the chain allows that. In the stopped mode only blocks arriving
%%% from other miners are added to the chain.
%%%
%%% The mining can be controlled by the API functions start_mining/0
%%% and stop_mining/0. The stop_mining is preemptive (i.e., all workers
%%% involved in mining are killed).
%%%
%%% The aec_conductor operates by delegating all heavy operations to
%%% worker processes in order to be responsive. (See doc at the worker
%%% handling section.)
%%%
%%% The work flow in mining is divided into stages:
%%%  - wait for keys (of the miner)
%%%  - wait for block candidate generation
%%%  - start mining
%%%  - retry mining
%%%
%%% The principle is to optimistically try to start mining, and fall
%%% back to an earlier stage if the preconditions are not met. The next
%%% stage of mining should be triggered in the worker reply for each
%%% stage based on the postconditions of that stage.
%%%
%%% E.g. If the start_mining stage is attempted without having a block
%%% candidate, it should fall back to wait for a block candidate.
%%%
%%% E.g. When the mining worker returns it should either start mining a
%%% new block or retry mining based on the return of the mining.
%%% @end
%%% --------------------------------------------------------------------

-module(aec_conductor).

-behaviour(gen_server).

%% Mining API
-export([ get_miner_instances/0
        , get_mining_state/0
        , get_mining_workers/0
        , start_mining/0
        , stop_mining/0
        , is_leader/0
        , get_beneficiary/0
        ]).

%% Chain API
-export([ add_synced_block/1
        , get_key_block_candidate/0
        , post_block/1
        ]).

%% for tests
-export([reinit_chain/0
        ]).

%% gen_server API
-export([ start_link/0
        , start_link/1
        , stop/0 %% For testing
        ]).

%% gen_server callbacks
-export([ init/1
        , handle_call/3
        , handle_cast/2
        , handle_info/2
        , terminate/2
        , code_change/3]).

-export_type([options/0]).

-include("blocks.hrl").
-include("aec_conductor.hrl").

-define(SERVER, ?MODULE).

-define(DEFAULT_MINING_ATTEMPT_TIMEOUT, 60 * 60 * 1000). %% milliseconds

%%%===================================================================
%%% API
%%%===================================================================

%%%===================================================================
%%% Gen server API

start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

start_link(Options) ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, Options, []).

stop() ->
    gen_server:stop(?SERVER).

%%%===================================================================
%%% Mining API

get_miner_instances() ->
    gen_server:call(?SERVER, get_miner_instances).

-spec start_mining() -> 'ok'.
start_mining() ->
    gen_server:call(?SERVER, start_mining).

-spec stop_mining() -> 'ok'.
stop_mining() ->
    gen_server:call(?SERVER, stop_mining).

-spec get_mining_state() -> mining_state().
get_mining_state() ->
    gen_server:call(?SERVER, get_mining_state).

-spec get_mining_workers() -> [pid()].
get_mining_workers() ->
    gen_server:call(?SERVER, get_mining_workers).

-spec is_leader() -> boolean().
is_leader() ->
    gen_server:call(?SERVER, is_leader).

%%%===================================================================
%%% Chain API

-spec post_block(aec_blocks:block()) -> 'ok' | {'error', any()}.
post_block(Block) ->
    case aec_validation:validate_block(Block) of
        ok ->
            gen_server:call(?SERVER, {post_block, Block}, 30000);
        {error, {header, Reason}} ->
            epoch_mining:info("Header failed validation: ~p", [Reason]),
            {error, Reason};
        {error, {block, Reason}} ->
            epoch_mining:info("Block failed validation: ~p", [Reason]),
            {error, Reason}
    end.

-spec add_synced_block(aec_blocks:block()) -> 'ok' | {'error', any()}.
add_synced_block(Block) ->
    case aec_validation:validate_block(Block) of
        ok ->
            gen_server:call(?SERVER, {add_synced_block, Block}, 30000);
        {error, {header, Reason}} ->
            epoch_mining:info("Header failed validation: ~p", [Reason]),
            {error, Reason};
        {error, {block, Reason}} ->
            epoch_mining:info("Block failed validation: ~p", [Reason]),
            {error, Reason}
    end.

-spec get_key_block_candidate() -> {'ok', aec_blocks:block()} | {'error', atom()}.
get_key_block_candidate() ->
    gen_server:call(?SERVER, get_key_block_candidate).

-spec reinit_chain() -> aec_headers:header().
reinit_chain() ->
    gen_server:call(?SERVER, reinit_chain).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

init(Options) ->
    process_flag(trap_exit, true),
    ok     = init_chain_state(),
    TopBlockHash = aec_chain:top_block_hash(),
    TopKeyBlockHash = aec_chain:top_key_block_hash(),
    Consensus = #consensus{micro_block_cycle = aec_governance:micro_block_cycle(),
                           leader = false},
    State1 = #state{ top_block_hash     = TopBlockHash,
                     top_key_block_hash = TopKeyBlockHash,
                     consensus          = Consensus},
    State2 = set_option(autostart, Options, State1),
    {ok, State3} = set_beneficiary(State2),
    State4 = init_miner_instances(State3),

    aec_metrics:try_update([ae,epoch,aecore,chain,height],
                           aec_blocks:height(aec_chain:top_block())),
    epoch_mining:info("Miner process initilized ~p", [State4]),
    aec_events:subscribe(candidate_block),
    %% NOTE: The init continues at handle_info(init_continue, State).
    self() ! init_continue,
    {ok, State4}.

init_chain_state() ->
    case aec_chain:genesis_hash() of
        undefined ->
            {GB, _GBState} = aec_block_genesis:genesis_block_with_state(),
            {ok, _} = aec_chain_state:insert_block(GB),
            ok;
        Hash when is_binary(Hash) ->
            ok
    end.

reinit_chain_state() ->
    %% NOTE: ONLY FOR TEST
    aec_db:transaction(fun() ->
                               aec_db:clear_db(),
                               init_chain_state()
                       end),
    exit(whereis(aec_tx_pool), kill),
    ok.

handle_call({add_synced_block, Block},_From, State) ->
    {Reply, State1} = handle_synced_block(Block, State),
    {reply, Reply, State1};
handle_call(get_key_block_candidate,_From, #state{beneficiary = undefined} = State) ->
    {reply, {error, beneficiary_not_configured}, State};
handle_call(get_key_block_candidate,_From, State) ->
    {Res, State1} =
        case State#state.pending_key_block of
            undefined ->
                get_pending_key_block(aec_chain:top_block_hash(), State);
            Block ->
                case {aec_chain:top_block_hash(), aec_blocks:prev_hash(State#state.pending_key_block)} of
                    {OldHash, OldHash} ->
                        {{ok, Block}, State};
                    {NewHash, _OldHash} ->
                        get_pending_key_block(NewHash, State)
                end
        end,
    {reply, Res, State1};
handle_call(get_miner_instances, _From, State) ->
    {reply, State#state.miner_instances, State};
handle_call({post_block, Block},_From, State) ->
    {Reply, State1} = handle_post_block(Block, State),
    {reply, Reply, State1};
handle_call(stop_mining,_From, State = #state{ consensus = Cons }) ->
    epoch_mining:info("Mining stopped"),
    aec_block_generator:stop_generation(),
    [ aec_tx_pool:garbage_collect() || is_record(Cons, consensus) andalso Cons#consensus.leader ],
    State1 = kill_all_workers(State),
    State2 = State1#state{mining_state = 'stopped',
                          key_block_candidates = undefined},
    {reply, ok, create_key_block_candidate(State2)};
handle_call(start_mining,_From, #state{mining_state = 'running'} = State) ->
    epoch_mining:info("Mining running"),
    {reply, ok, State};
handle_call(start_mining,_From, State = #state{ beneficiary = undefined }) ->
    epoch_mining:error("Cannot start mining - beneficiary not configured"),
    {reply, {error, beneficiary_not_configured}, State};
handle_call(start_mining,_From, State = #state{ consensus = Cons }) ->
    epoch_mining:info("Mining started"),
    State1 = start_mining(State#state{mining_state = 'running', consensus = Cons#consensus{leader = false}}),
    {reply, ok, State1};
handle_call(get_mining_state,_From, State) ->
    {reply, State#state.mining_state, State};
handle_call(get_mining_workers, _From, State) ->
    {reply, worker_pids_by_tag(mining, State), State};
handle_call(is_leader, _From, State = #state{ consensus = Cons }) ->
    {reply, Cons#consensus.leader, State};
handle_call(reinit_chain, _From, State1 = #state{ consensus = Cons }) ->
    %% NOTE: ONLY FOR TEST
    ok = reinit_chain_state(),
    TopBlockHash = aec_chain:top_block_hash(),
    TopKeyBlockHash = aec_chain:top_key_block_hash(),
    State2 = State1#state{top_block_hash = TopBlockHash,
                          top_key_block_hash = TopKeyBlockHash},
    State =
        case State2#state.mining_state of
            stopped  ->
                State2;
            running ->
                epoch_mining:info("Mining stopped"),
                State3 = kill_all_workers(State2),
                hard_reset_block_generator(),
                epoch_mining:info("Mining started"),
                start_mining(State3#state{mining_state = running,
                                          micro_block_candidate = undefined,
                                          key_block_candidates = undefined,
                                          consensus = Cons#consensus{leader = false}})
        end,
    {reply, ok, State};
handle_call(Request, _From, State) ->
    epoch_mining:error("Received unknown request: ~p", [Request]),
    Reply = ok,
    {reply, Reply, State}.

handle_cast(Other, State) ->
    epoch_mining:error("Received unknown cast: ~p", [Other]),
    {noreply, State}.

handle_info({gproc_ps_event, candidate_block, _}, State = #state{consensus = #consensus{leader = false}}) ->
    %% ignore new candidates if we are not a leader any more.
    {noreply, State};
handle_info({gproc_ps_event, candidate_block, #{info := new_candidate}}, State) ->
    case try_fetch_and_make_candidate() of
        {ok, Candidate} ->
            State1 = State#state{ micro_block_candidate = Candidate },
            {noreply, start_micro_signing(State1)};
        {error, no_candidate} ->
            {noreply, State#state{ micro_block_candidate = undefined }}
    end;
handle_info(init_continue, State) ->
    {noreply, start_mining(State)};
handle_info({worker_reply, Pid, Res}, State) ->
    State1 = handle_worker_reply(Pid, Res, State),
    {noreply, State1};
handle_info({'DOWN', Ref, process, Pid, Why}, State) when Why =/= normal->
    State1 = handle_monitor_message(Ref, Pid, Why, State),
    {noreply, State1};
handle_info(Other, State) ->
    %% TODO: Handle monitoring messages
    epoch_mining:error("Received unknown info message: ~p", [Other]),
    {noreply, State}.

terminate(_Reason, State) ->
    kill_all_workers(State),
    ok.

code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================

try_fetch_and_make_candidate() ->
    case aec_block_generator:get_candidate() of
        {ok, Block} ->
            Candidate = make_micro_candidate(Block),
            {ok, Candidate};
        {error, no_candidate} = Err ->
            Err
    end.

make_key_candidate(Block) ->
    HeaderBin = aec_headers:serialize_to_binary(aec_blocks:to_header(Block)),
    Nonce     = aeminer_pow:pick_nonce(),
    {HeaderBin, #candidate{ block    = Block,
                            nonce    = Nonce,
                            top_hash = aec_blocks:prev_hash(Block) }}.

make_micro_candidate(Block) ->
    #candidate{ block    = Block,
                top_hash = aec_blocks:prev_hash(Block) }.

%%%===================================================================
%%% Handle init options

set_option(autostart, Options, State) ->
    case get_option(autostart, Options) of
        undefined   -> State;
        {ok, true}  -> State#state{mining_state = running};
        {ok, false} -> State#state{mining_state = stopped}
    end.

get_option(Opt, Options) ->
    case proplists:lookup(Opt, Options) of
        none -> application:get_env(aecore, Opt);
        {_, Val} -> {ok, Val}
    end.

set_beneficiary(#state{mining_state = MiningState} = State) ->
    case get_beneficiary() of
        {ok, Beneficiary} ->
            {ok, State#state{beneficiary = Beneficiary}};
        {error, beneficiary_not_configured} = Error ->
            case MiningState of
                running ->
                    lager:error("Beneficiary must be configured with (autostart) mining on"),
                    Error;
                stopped ->
                    {ok, State}
            end;
        {error, _Reason} = Error ->
            Error
    end.

get_beneficiary() ->
    case aeu_env:user_config_or_env([<<"mining">>, <<"beneficiary">>], aecore, beneficiary) of
        {ok, EncodedBeneficiary} ->
            case aeser_api_encoder:safe_decode(account_pubkey, EncodedBeneficiary) of
                {ok, _Beneficiary} = Result ->
                    Result;
                {error, Reason} ->
                    {error, {beneficiary_error, Reason}}
            end;
        undefined ->
            {error, beneficiary_not_configured}
    end.

%%%===================================================================
%%% Handle monitor messages

handle_monitor_message(Ref, Pid, Why, State) ->
    case lookup_worker(Ref, Pid, State) of
        not_found ->
            epoch_mining:info("Got unknown monitor DOWN message: ~p",
                              [{Ref, Pid, Why}]),
            State;
        {ok, Tag} ->
            epoch_mining:error("Worker died: ~p", [{Tag, Pid, Why}]),
            State1 = state_cleanup_after_worker(State, Tag, Pid),
            State2 = maybe_unblock_tag(Tag, State1),
            State3 = erase_worker(Pid, State2),
            start_mining(State3)
    end.

%%%===================================================================
%%% Worker handling
%%% @private
%%% @doc
%%%
%%% Worker functions are funs of arity 0 with a tag to determine the
%%% type of worker. Tags are enforced to be 'singleton' (only one worker
%%% allowed) or 'concurrent' (allow concurrent processes).
%%%
%%% The worker processes are monitored. Some types of worker are
%%% killed after a timeout.
%%%
%%% The worker processes provide return values through message
%%% passing. Return values are passed as messages, and the reply is
%%% handled based on the tag. The worker fun does not need to handle
%%% the message passing itself. This is taken care of by the
%%% dispatcher.
%%%
%%% Note that when the reply is handled, the state is the current
%%% server state, not the state in which the worker was
%%% dispatched. Any consistency checks for staleness must be handled
%%% in the reply handler.
%%%
%%% Workers can be killed (e.g., on preemption because of a changed
%%% chain) based on tag. Note that since the worker might have sent an
%%% answer before it is killed, it is good to check answers for
%%% staleness. TODO: This could be done by the framework.

lookup_worker(Ref, Pid, State) ->
    case orddict:find(Pid, State#state.workers) of
        {ok, #worker_info{mon = Ref} = Info} -> {ok, Info#worker_info.tag};
        error -> not_found
    end.

worker_pids_by_tag(Tag, State) ->
    orddict:fetch_keys(
      orddict:filter(
        fun(_, Info) -> Info#worker_info.tag == Tag end,
        State#state.workers)).

dispatch_worker(Tag, Fun, State) ->
    case is_tag_blocked(Tag, State) of
        true ->
            epoch_mining:error("Disallowing dispatch of additional ~p worker",
                               [Tag]),
            {State, undefined};
        false ->
            {Pid, Info} = spawn_worker(Tag, Fun),
            State1 = maybe_block_tag(Tag, State),
            Workers = orddict:store(Pid, Info, State1#state.workers),
            State2 = State1#state{workers = Workers},
            {State2, Pid}
    end.

is_tag_blocked(Tag, State) ->
    ordsets:is_element(Tag, State#state.blocked_tags).

maybe_block_tag(Tag, #state{blocked_tags = B} = State) ->
    case tag_concurrency(Tag) of
        concurrent -> State;
        singleton  -> State#state{blocked_tags = ordsets:add_element(Tag, B)}
    end.

maybe_unblock_tag(Tag, #state{blocked_tags = B} = State) ->
    case tag_concurrency(Tag) of
        concurrent -> State;
        singleton  -> State#state{blocked_tags = ordsets:del_element(Tag, B)}
    end.

tag_concurrency(mining)                     -> concurrent;
tag_concurrency(create_key_block_candidate) -> singleton;
tag_concurrency(micro_sleep)                -> singleton;
tag_concurrency(wait_for_keys)              -> singleton.

spawn_worker(Tag, Fun) ->
    Timeout = worker_timeout(Tag),
    spawn_worker(Tag, Fun, Timeout).

worker_timeout(create_key_block_candidate) ->
    infinity;
worker_timeout(micro_sleep) ->
    infinity; %% TODO NG: pull from governance and add buffer
worker_timeout(mining) ->
    aeu_env:get_env(aecore, mining_attempt_timeout, ?DEFAULT_MINING_ATTEMPT_TIMEOUT);
worker_timeout(wait_for_keys) ->
    infinity.

spawn_worker(Tag, Fun, Timeout) ->
    Wrapper = wrap_worker_fun(Fun),
    {Pid, Ref} = spawn_monitor(Wrapper),
    Timer = case Timeout of
                infinity ->
                    no_timer;
                TimeMs when is_integer(TimeMs), TimeMs > 0 ->
                    {ok, TRef} = timer:exit_after(TimeMs, Pid, shutdown),
                    {t, TRef}
            end,
    {Pid, #worker_info{tag = Tag, mon = Ref, timer = Timer}}.

wrap_worker_fun(Fun) ->
    Server = self(),
    fun() ->
            Server ! {worker_reply, self(), Fun()}
    end.

handle_worker_reply(Pid, Reply, State) ->
    Workers = State#state.workers,
    case orddict:find(Pid, Workers) of
        {ok, Info} ->
            Tag = Info#worker_info.tag,
            State1 = state_cleanup_after_worker(State, Tag, Pid),
            ok     = cleanup_after_worker(Info),
            State2 = maybe_unblock_tag(Tag, State1),
            State3 = erase_worker(Pid, State2),
            worker_reply(Tag, Reply, State3);
        error ->
            epoch_mining:info("Got unsolicited worker reply: ~p",
                              [{Pid, Reply}]),
            State
    end.

worker_reply(create_key_block_candidate, Res, State) ->
    handle_key_block_candidate_reply(Res, State);
worker_reply(mining, Res, State) ->
    handle_mining_reply(Res, State);
worker_reply(micro_sleep, Res, State) ->
    handle_micro_sleep_reply(Res, State);
worker_reply(wait_for_keys, Res, State) ->
    handle_wait_for_keys_reply(Res, State).

state_cleanup_after_worker(State, mining, Pid) ->
    deregister_miner_instance(Pid, State);
state_cleanup_after_worker(State, _Tag, _Pid) ->
    State.

cleanup_after_worker(Info) ->
    case Info#worker_info.timer of
        no_timer -> ok;
        {t, TRef} -> timer:cancel(TRef)
    end,
    demonitor(Info#worker_info.mon, [flush]),
    ok.

kill_worker(Pid, Info, State) ->
    State1 = state_cleanup_after_worker(State, Info#worker_info.tag, Pid),
    ok     = cleanup_after_worker(Info),
    exit(Pid, shutdown),
    %% Flush messages from this worker.
    receive {worker_reply, Pid, _} -> ok
    after 0 -> ok end,
    State2 = maybe_unblock_tag(Info#worker_info.tag, State1),
    erase_worker(Pid, State2).

kill_all_workers(#state{workers = Workers} = State) ->
    lists:foldl(
      fun({Pid, Info}, S) ->
              kill_worker(Pid, Info, S)
      end,
      State, Workers).

kill_all_workers_with_tag(Tag, #state{workers = Workers} = State) ->
    lists:foldl(
      fun({Pid, Info}, S) ->
              case Tag =:= Info#worker_info.tag of
                  true  -> kill_worker(Pid, Info, S);
                  false -> S
              end
      end, State, Workers).

erase_worker(Pid, #state{workers = Workers} = State) ->
    State#state{workers = orddict:erase(Pid, Workers)}.

%%%===================================================================
%%% Miner instances handling

init_miner_instances(State) ->
    MinerConfigs   = aec_mining:get_miner_configs(),
    MinerInstances = create_miner_instances(MinerConfigs),
    State#state{miner_instances = MinerInstances}.

create_miner_instances(MinerConfigs) when is_list(MinerConfigs) ->
    {MinerInstances, _} =
        lists:foldl(
          fun(MinerConfig, {Acc, Id}) ->
                  {Instances, NextId} = create_miner_instances(MinerConfig, Id),
                  {Instances ++ Acc, NextId}
          end, {[], 0}, MinerConfigs),
    MinerInstances.

create_miner_instances(MinerConfig, FirstId) ->
    case aeminer_pow_cuckoo:addressed_instances(MinerConfig) of
        undefined ->
            {[create_miner_instance(FirstId, undefined, MinerConfig)], FirstId + 1};
        AddressedInstances when is_list(AddressedInstances) ->
            lists:foldl(
              fun(AddressedInstance, {Acc, Id}) ->
                      {[create_miner_instance(Id, AddressedInstance, MinerConfig) | Acc], Id + 1}
              end, {[], FirstId}, AddressedInstances)
    end.

create_miner_instance(Id, Instance, Config) ->
    #miner_instance{id       = Id,
                    instance = Instance,
                    config   = Config,
                    state    = available}.

available_miner_instance(#state{miner_instances = MinerInstances}) ->
    get_first_available_instance(MinerInstances).

get_first_available_instance([]) ->
    none;
get_first_available_instance([#miner_instance{state = available} = Instance | _Instances]) ->
    Instance;
get_first_available_instance([_Instance | Instances]) ->
    get_first_available_instance(Instances).

register_miner_instance(Instance, Pid, #state{miner_instances = MinerInstances0} = State) ->
    UpdatedInstance = Instance#miner_instance{state = Pid},
    MinerInstances  = lists:keyreplace(Instance#miner_instance.id, #miner_instance.id, MinerInstances0, UpdatedInstance),
    State#state{miner_instances = MinerInstances}.

deregister_miner_instance(Pid, #state{miner_instances = MinerInstances0} = State) ->
    Instance0 = lists:keyfind(Pid, #miner_instance.state, MinerInstances0),
    Instance  = Instance0#miner_instance{state = available},
    MinerInstances = lists:keyreplace(Pid, #miner_instance.state, MinerInstances0, Instance),
    State#state{miner_instances = MinerInstances}.

%%%===================================================================
%%% Preemption of workers if the top of the chain changes.

preempt_if_new_top(#state{ top_block_hash = OldHash,
                           top_key_block_hash = OldKeyHash } = State, Origin) ->
    case aec_chain:top_block_hash() of
        OldHash -> no_change;
        NewHash ->
            {ok, NewBlock} = aec_chain:get_block(NewHash),
            BlockType = aec_blocks:type(NewBlock),
            ok = aec_tx_pool:top_change(BlockType, OldHash, NewHash),

            Hdr = aec_blocks:to_header(NewBlock),
            Height = aec_headers:height(Hdr),
            aec_events:publish(top_changed, #{ block_hash => NewHash
                                             , block_type => BlockType
                                             , prev_hash  => aec_headers:prev_hash(Hdr)
                                             , height     => Height }),
            maybe_publish_top(Origin, NewBlock),
            aec_metrics:try_update([ae,epoch,aecore,chain,height], Height),
            State1 = State#state{top_block_hash = NewHash},
            KeyHash = aec_blocks:prev_key_hash(NewBlock),
            %% A new micro block from the same generation should
            %% not cause a pre-emption or full re-generation of key-block.
            case BlockType of
                micro when OldKeyHash =:= KeyHash ->
                    {micro_changed, State1};
                KeyOrNewForkMicro ->
                    State2 = kill_all_workers_with_tag(mining, State1),
                    State3 = kill_all_workers_with_tag(create_key_block_candidate, State2),
                    State4 = kill_all_workers_with_tag(micro_sleep, State3), %% in case we are the leader
                    NewTopKey = case KeyOrNewForkMicro of
                                    micro -> KeyHash;
                                    key   -> NewHash
                                end,
                    State5 = State4#state{ top_key_block_hash = NewTopKey,
                                           key_block_candidates = undefined },

                    [ aec_keys:promote_candidate(aec_blocks:miner(NewBlock)) || KeyOrNewForkMicro == key ],

                    {changed, NewBlock, create_key_block_candidate(State5)}
            end
    end.

maybe_publish_tx_events(Events, Hash, Origin) when Origin =/= block_synced,
                                                   map_size(Events) > 0 ->
    lager:debug("publish tx_events: ~p", [Events]),
    [aec_events:publish({tx_event, Event}, Info#{ block_hash => Hash
                                                , block_origin => Origin})
     || {Event, Info} <- maps:to_list(Events)];
maybe_publish_tx_events(_, _, _) ->
    ok.


maybe_publish_top(block_created,_TopBlock) ->
    %% A new block we created is published unconditionally below.
    ok;
maybe_publish_top(micro_block_created,_TopBlock) ->
    %% A new block we created is published unconditionally below.
    ok;
maybe_publish_top(block_synced,_TopBlock) ->
    %% We don't publish blocks pulled from network. Otherwise on
    %% bootstrap the node would publish old blocks.
    ok;
maybe_publish_top(block_received, TopBlock) ->
    %% The received block pushed by a network peer changed the
    %% top. Publish the new top.
    aec_events:publish(block_to_publish, {received, TopBlock});
maybe_publish_top(micro_block_received, TopBlock) ->
    %% The received micro block pushed by a network peer changed the
    %% top. Publish the new top.
    aec_events:publish(block_to_publish, {received, TopBlock}).

maybe_publish_block(block_synced,_Block) ->
    %% We don't publish blocks pulled from network. Otherwise on
    %% bootstrap the node would publish old blocks.
    ok;
maybe_publish_block(BlockReceived,_Block)
  when BlockReceived =:= block_received
       orelse BlockReceived =:= micro_block_received ->
    %% We don't publish all blocks pushed by network peers, only if it
    %% changes the top.
    ok;
maybe_publish_block(block_created = T, Block) ->
    aec_events:publish(T, Block),
    %% This is a block we created ourselves. Always publish.
    aec_events:publish(block_to_publish, {created, Block});
maybe_publish_block(micro_block_created = T, Block) ->
    aec_events:publish(T, Block),
    %% This is a block we created ourselves. Always publish.
    aec_events:publish(block_to_publish, {created, Block}).

%%%===================================================================
%%% Worker: Wait for keys to appear

-define(WAIT_FOR_KEYS_RETRIES, 10).

wait_for_keys(State) ->
    Fun = fun wait_for_keys_worker/0,
    {State1, _Pid} = dispatch_worker(wait_for_keys, Fun, State),
    State1.

wait_for_keys_worker() ->
    wait_for_keys_worker(?WAIT_FOR_KEYS_RETRIES).

wait_for_keys_worker(0) ->
    timeout;
wait_for_keys_worker(N) ->
    case aec_keys:pubkey() of
        {ok, _Pubkey} -> keys_ready;
        {error, _} ->
            timer:sleep(500),
            wait_for_keys_worker(N - 1)
    end.

handle_wait_for_keys_reply(keys_ready, State) ->
    start_mining(State#state{keys_ready = true});
handle_wait_for_keys_reply(timeout, State) ->
    %% TODO: We should probably die hard at some point instead of retrying.
    epoch_mining:error("Timed out waiting for keys. Retrying."),
    wait_for_keys(State#state{keys_ready = false}).

%%%===================================================================
%%% Worker: Start mining

start_mining(#state{keys_ready = false} = State) ->
    %% We need to get the keys first
    wait_for_keys(State);
start_mining(#state{key_block_candidates = undefined,
                    beneficiary         = Beneficiary} = State) when Beneficiary =/= undefined ->
    %% If the mining is turned off and beneficiary is configured,
    %% the key block candidate is still created, but not mined.
    %% The candidate can be retrieved via the API and other nodes can mine it.
    State1 = kill_all_workers_with_tag(create_key_block_candidate, State),
    create_key_block_candidate(State1);
start_mining(#state{mining_state = stopped} = State) ->
    State;
start_mining(#state{key_block_candidates = [{_, #candidate{top_hash = OldHash}} | _],
                    top_block_hash = TopHash } = State) when OldHash =/= TopHash ->
    %% Candidate generated with stale top hash.
    %% Regenerate the candidate.
    create_key_block_candidate(State);
start_mining(#state{key_block_candidates = [{HeaderBin, Candidate} | Candidates]} = State) ->
    case available_miner_instance(State) of
        none -> State;
        Instance ->
            epoch_mining:info("Starting miner on top of ~p", [State#state.top_block_hash]),
            Target            = aec_blocks:target(Candidate#candidate.block),
            MinerConfig       = Instance#miner_instance.config,
            AddressedInstance = Instance#miner_instance.instance,
            Nonce             = aeminer_pow:trim_nonce(Candidate#candidate.nonce, MinerConfig),
            Info              = [{top_block_hash, State#state.top_block_hash}],
            aec_events:publish(start_mining, Info),
            Fun = fun() ->
                          {aec_mining:generate(HeaderBin, Target, Nonce, MinerConfig, AddressedInstance)
                          , HeaderBin}
                  end,
            Candidate1 = register_miner(Candidate, Nonce, MinerConfig),
            State1 = State#state{key_block_candidates = [{HeaderBin, Candidate1} | Candidates]},
            {State2, Pid} = dispatch_worker(mining, Fun, State1),
            State3 = register_miner_instance(Instance, Pid, State2),
            epoch_mining:info("Miner ~p started", [Pid]),
            start_mining(State3)
    end.

register_miner(Candidate = #candidate{refs  = Refs}, Nonce, MinerConfig) ->
    NextNonce = aeminer_pow:next_nonce(Nonce, MinerConfig),
    Candidate#candidate{refs  = Refs + 1,
                        nonce = NextNonce}.

handle_mining_reply(_Reply, #state{key_block_candidates = undefined} = State) ->
    %% Something invalidated the block candidates already.
    start_mining(State);
handle_mining_reply({{ok, {Nonce, Evd}}, HeaderBin}, #state{} = State) ->
    Candidates = State#state.key_block_candidates,
    %% Check that the solution is for one of the valid candidates.
    case proplists:get_value(HeaderBin, Candidates) of
        #candidate{block = CandidateBlock} ->
            aec_metrics:try_update([ae,epoch,aecore,mining,blocks_mined], 1),
            State1 = State#state{key_block_candidates = undefined},
            Block = aec_blocks:set_nonce_and_pow(CandidateBlock, Nonce, Evd),
            case handle_mined_block(Block, State1) of
                {ok, State2} ->
                    State2;
                {{error, Reason}, State2} ->
                    epoch_mining:error("Block insertion failed: ~p.", [Reason]),
                    start_mining(State2)
            end;
        undefined ->
            %% This mining effort was for an earlier block candidate.
            epoch_mining:error("Found solution for old block", []),
            start_mining(State)
    end;
handle_mining_reply({{error, no_solution}, HeaderBin}, State) ->
    aec_metrics:try_update([ae,epoch,aecore,mining,retries], 1),
    epoch_mining:debug("Failed to mine block, no solution; retrying."),
    retry_mining(State, HeaderBin);
handle_mining_reply({{error, {runtime, Reason}}, HeaderBin}, State) ->
    aec_metrics:try_update([ae,epoch,aecore,mining,retries], 1),
    epoch_mining:error("Failed to mine block, runtime error; "
                       "retrying with different nonce. "
                       "Error: ~p", [Reason]),
    retry_mining(State, HeaderBin).

%%%===================================================================
%%% Retry mining when we failed to find a solution.

retry_mining(S = #state{key_block_candidates = [{HeaderBin, Candidate} | Candidates]}, HeaderBin) ->
    Candidate1 = Candidate#candidate{refs = Candidate#candidate.refs - 1},
    start_mining(S#state{key_block_candidates = [{HeaderBin, Candidate1} | Candidates]});
retry_mining(S = #state{key_block_candidates = Candidates}, HeaderBin) when is_list(Candidates) ->
    case proplists:get_value(HeaderBin, Candidates) of
        undefined ->
            create_key_block_candidate(S);
        #candidate{refs = 1} ->
            create_key_block_candidate(S#state{key_block_candidates = proplists:delete(HeaderBin, Candidates)});
        #candidate{refs = N} = C when N > 1 ->
            Candidates1 = lists:keyreplace(HeaderBin, 1, Candidates, {HeaderBin, C#candidate{refs = N - 1}}),
            create_key_block_candidate(S#state{key_block_candidates = Candidates1})
    end.

%%%===================================================================
%%% Worker: Start signing microblocks

start_micro_signing(#state{keys_ready = false} = State) ->
    %% We need to get the keys first
    wait_for_keys(State);
start_micro_signing(#state{consensus = #consensus{leader = true}, micro_block_candidate = undefined} = State) ->
    %% We have to wait for a new block candidate first.
    State;
start_micro_signing(#state{consensus = #consensus{leader = true},
                           micro_block_candidate = #candidate{top_hash = MicroBlockHash},
                           top_block_hash = TopHash} = State) when MicroBlockHash =/= TopHash ->
    %% Candidate generated with stale top hash.
    %% Regenerate the candidate.
    State#state{micro_block_candidate = undefined};
start_micro_signing(#state{consensus = #consensus{leader = true},
                           micro_block_candidate = #candidate{block = MicroBlock}} = State) ->
    case is_tag_blocked(micro_sleep, State) of
        true ->
            epoch_mining:debug("Too early to sign micro block, wait a bit longer"),
            State;
        false ->
            epoch_mining:info("Signing microblock"),
            {ok, SignedMicroBlock} = aec_keys:sign_micro_block(MicroBlock),
            State1 = State#state{micro_block_candidate = undefined},
            case handle_signed_block(SignedMicroBlock, State1) of
                {ok, State2} ->
                    State2;
                {{error, Reason}, State2} ->
                    epoch_mining:error("Block insertion failed: ~p.", [Reason]),
                    start_micro_signing(State2)
            end
    end;
start_micro_signing(#state{consensus = Consensus,
                           micro_block_candidate = MicroCandidate,
                           key_block_candidates = KeyBlockCandidate,
                           top_block_hash = SeenHash
                          } = State) ->
    %% Probably no longer the leader
    epoch_mining:debug("Fallback clause, candidate conditions not met. micro: ~p, key: ~p, seen top: ~p, consensus: ~p",
                       [MicroCandidate, KeyBlockCandidate, SeenHash, Consensus]),
    State.

%%%===================================================================
%%% Worker: Timer for sleep between micro blocks

start_micro_sleep(#state{consensus = #consensus{leader = true, micro_block_cycle = Timeout}} = State) ->
    epoch_mining:debug("Starting sleep in between microblocks"),
    Info      = [{start_micro_sleep, State#state.top_block_hash}],
    aec_events:publish(start_micro_sleep, Info),
    Fun = fun() ->
                  timer:sleep(Timeout)
          end,
    {State1, _Pid} = dispatch_worker(micro_sleep, Fun, State),
    State1;
start_micro_sleep(State) ->
    State.

handle_micro_sleep_reply(ok, State) ->
    start_micro_signing(State).

%%%===================================================================
%%% Worker: Generate new block candidates

create_key_block_candidate(#state{keys_ready = false} = State) ->
    %% Keys are needed for creating a candidate
    wait_for_keys(State);
create_key_block_candidate(#state{beneficiary = undefined} = State) ->
    State;
create_key_block_candidate(#state{key_block_candidates = [{_, #candidate{top_hash = TopHash}} | _],
                                  top_block_hash       = TopHash} = State) ->
    %% We have the most recent candidate already. Just start mining.
    start_mining(State);
create_key_block_candidate(#state{top_block_hash = TopHash,
                                  beneficiary    = Beneficiary} = State) ->
    epoch_mining:info("Creating key block candidate on the top"),
    Fun = fun() ->
                  {aec_block_key_candidate:create(TopHash, Beneficiary), TopHash}
          end,
    {State1, _Pid} = dispatch_worker(create_key_block_candidate, Fun, State),
    State1.

handle_key_block_candidate_reply({{ok, KeyBlockCandidate}, TopHash},
                                 #state{top_block_hash = TopHash,
                                        key_block_candidates = Candidates0} = State) ->
    epoch_mining:info("Created key block candidate "
                      "Its target is ~p (= difficulty ~p).",
                      [aec_blocks:target(KeyBlockCandidate),
                       aec_blocks:difficulty(KeyBlockCandidate)]),
    {HeaderBin, Candidate} = make_key_candidate(KeyBlockCandidate),
    Candidates = case Candidates0 of
                     undefined -> [{HeaderBin, Candidate}];
                     _         -> [{HeaderBin, Candidate} | Candidates0]
                 end,
    State1 = State#state{key_block_candidates = Candidates},
    start_mining(State1);
handle_key_block_candidate_reply({{ok, _KeyBlockCandidate}, _OldTopHash},
                                 #state{top_block_hash = _TopHash} = State) ->
    epoch_mining:debug("Created key block candidate is already stale, create a new one", []),
    create_key_block_candidate(State);
handle_key_block_candidate_reply({{error, key_not_found}, _}, State) ->
    start_mining(State#state{keys_ready = false});
handle_key_block_candidate_reply({{error, Reason}, _}, State) ->
    epoch_mining:error("Creation of key block candidate failed: ~p", [Reason]),
    create_key_block_candidate(State).

%%%===================================================================
%%% In server context: A block was given to us from the outside world

handle_synced_block(Block, State) ->
    epoch_mining:info("synced_block: ~p", [Block]),
    handle_add_block(Block, State, block_synced).

handle_post_block(Block, State) ->
    case aec_blocks:is_key_block(Block) of
        true ->
            epoch_mining:info("post_block: ~p", [Block]),
            handle_add_block(Block, State, block_received);
        false ->
            epoch_mining:info("post_micro_block: ~p", [Block]),
            handle_add_block(Block, State, micro_block_received)
    end.

handle_mined_block(Block, State) ->
    epoch_mining:info("Block mined: Height = ~p; Hash = ~s",
                      [aec_blocks:height(Block),
                       as_hex(aec_blocks:root_hash(Block))]),
    handle_add_block(Block, State, block_created).

handle_signed_block(Block, State) ->
    epoch_mining:info("Block signed: Height = ~p; Hash = ~s",
                      [aec_blocks:height(Block),
                       as_hex(aec_blocks:root_hash(Block))]),
    handle_add_block(Block, State, micro_block_created).

as_hex(S) ->
    [io_lib:format("~2.16.0b", [X]) || <<X:8>> <= S].

handle_add_block(Block, #state{} = State, Origin) ->
    Header = aec_blocks:to_header(Block),
    handle_add_block(Header, Block, State, Origin).

handle_add_block(Header, Block, State, Origin) ->
    {ok, Hash} = aec_headers:hash_header(Header),
    case aec_chain:has_block(Hash) of
        true ->
            epoch_mining:debug("Block already in chain", []),
            {ok, State};
        false ->
            %% Block validation is performed in the caller's context for
            %% external (gossip/sync) blocks and we trust the ones we
            %% produce ourselves.
            case aec_chain_state:insert_block(Block, Origin) of
                {ok, Events} ->
                    handle_successfully_added_block(Block, Hash, Events, State, Origin);
                {pof,_PoF,Events} ->
                    %% TODO: should we really publish tx_events in this case?
                    lager:info("PoF found in ~p", [Hash]),
                    handle_successfully_added_block(Block, Hash, Events, State, Origin);
                {error, Reason} when Origin == block_created; Origin == micro_block_created ->
                    lager:error("Couldn't insert created block (~p)", [Reason]),
                    {{error, Reason}, State};
                {error, Reason} ->
                    lager:info("Couldn't insert received block (~p)", [Reason]),
                    {{error, Reason}, State}
            end
    end.

handle_successfully_added_block(Block, Hash, Events, State, Origin) ->
    maybe_publish_tx_events(Events, Hash, Origin),
    maybe_publish_block(Origin, Block),
    case preempt_if_new_top(State, Origin) of
        no_change ->
            {ok, State};
        {micro_changed, State2 = #state{ consensus = Cons }} ->
            {ok, setup_loop(State2, false, Cons#consensus.leader, Origin)};
        {changed, NewTopBlock, State2} ->
            IsLeader = is_leader(NewTopBlock),
            %% Don't spend time when we are the leader.
            [ aec_tx_pool:garbage_collect() || not IsLeader ],
            {ok, setup_loop(State2, true, IsLeader, Origin)}
    end.


%% NG-TODO: This is pretty inefficient and can be helped with some info
%%          in the state.
is_leader(NewTopBlock) ->
    LeaderKey =
        case aec_blocks:type(NewTopBlock) of
            key   -> aec_blocks:miner(NewTopBlock);
            micro ->
                KeyHash = aec_blocks:prev_key_hash(NewTopBlock),
                {ok, Block} = aec_chain:get_block(KeyHash),
                aec_blocks:miner(Block)
        end,
    case aec_keys:pubkey() of
        {ok, MinerKey} -> LeaderKey =:= MinerKey;
        {error, _}     -> false
    end.

hard_reset_block_generator() ->
    %% Hard reset of aec_block_generator
    exit(whereis(aec_block_generator), kill),
    flush_candidate().

flush_candidate() ->
    receive
        {gproc_ps_event, candidate_block, _} ->
            flush_candidate()
    after 10 ->
            ok
    end.

setup_loop(State = #state{ consensus = Cons }, RestartMining, IsLeader, Origin) ->
    State1 = State#state{ consensus = Cons#consensus{ leader = IsLeader } },
    State2 =
        case Origin of
            Origin when IsLeader, Origin =:= block_created
                        orelse Origin =:= block_received ->
                aec_block_generator:start_generation(),
                start_micro_signing(State1);
            block_received when not IsLeader ->
                aec_block_generator:stop_generation(),
                State1;
            micro_block_created when IsLeader ->
                start_micro_sleep(State1);
            Origin when Origin =:= block_created; Origin =:= micro_block_created;
                        Origin =:= block_received; Origin =:= micro_block_received;
                        Origin =:= block_synced ->
                State1
        end,
    case RestartMining of
        true  -> start_mining(State2);
        false -> State2
    end.

get_pending_key_block(undefined, State) ->
    {{error, not_found}, State};
get_pending_key_block(TopHash, #state{beneficiary = Beneficiary} = State) ->
    case aec_block_key_candidate:create(TopHash, Beneficiary) of
        {ok, Block} -> {{ok, Block}, State#state{ pending_key_block = Block }};
        {error, _}  -> {{error, not_found}, State}
    end.
