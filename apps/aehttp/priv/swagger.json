{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is the [Aeternity](https://www.aeternity.com/) Epoch API.",
    "version" : "1.0.0",
    "title" : "Aeternity Epoch",
    "termsOfService" : "https://www.aeternity.com/terms/",
    "contact" : {
      "email" : "apiteam@aeternity.com"
    }
  },
  "basePath" : "/v2",
  "tags" : [ {
    "name" : "external",
    "description" : "External API"
  }, {
    "name" : "internal",
    "description" : "Internal API"
  } ],
  "schemes" : [ "http" ],
  "paths" : {
    "/ping" : {
      "post" : {
        "tags" : [ "external" ],
        "description" : "",
        "operationId" : "Ping",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Ping a peer",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Ping"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Sample response",
            "schema" : {
              "$ref" : "#/definitions/Ping"
            }
          },
          "403" : {
            "description" : "Not allowed (node is blocked)",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Different genesis blocks",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/top" : {
      "get" : {
        "tags" : [ "external" ],
        "description" : "Get the top block header",
        "operationId" : "GetTop",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Top"
            }
          }
        }
      }
    },
    "/block-by-height" : {
      "get" : {
        "tags" : [ "external" ],
        "description" : "Get a block by height",
        "operationId" : "GetBlockByHeight",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "height",
          "in" : "query",
          "description" : "Height of the block to fetch",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The block being found",
            "schema" : {
              "$ref" : "#/definitions/Block"
            }
          },
          "404" : {
            "description" : "Block not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block-by-hash" : {
      "get" : {
        "tags" : [ "external" ],
        "description" : "Get a block by hash",
        "operationId" : "GetBlockByHash",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hash",
          "in" : "query",
          "description" : "Hash of the block to fetch",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The block being found",
            "schema" : {
              "$ref" : "#/definitions/Block"
            }
          },
          "400" : {
            "description" : "Invalid hash",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Block not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block" : {
      "post" : {
        "tags" : [ "external" ],
        "description" : "Post a new block",
        "operationId" : "PostBlock",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Put a new block to node",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Block"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "400" : {
            "description" : "Block or header validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tx" : {
      "post" : {
        "tags" : [ "external" ],
        "description" : "Post a new transaction",
        "operationId" : "PostTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Put a new transaction to node",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Tx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation"
          },
          "400" : {
            "description" : "Invalid transaction",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions" : {
      "get" : {
        "tags" : [ "external" ],
        "description" : "Get transactions in the mempool",
        "operationId" : "GetTxs",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Transactions"
            }
          }
        }
      }
    },
    "/name" : {
      "get" : {
        "tags" : [ "external" ],
        "description" : "Get name entry from Naming System",
        "operationId" : "GetName",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Name to get entry from Naming System",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Name data",
            "schema" : {
              "$ref" : "#/definitions/NameEntry"
            }
          },
          "404" : {
            "description" : "Name not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/spend-tx" : {
      "post" : {
        "tags" : [ "internal" ],
        "description" : "Create spend transaction",
        "operationId" : "PostSpendTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Creates new spend transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SpendTx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "404" : {
            "description" : "Spend transaction validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oracles" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get active registered oracles",
        "operationId" : "GetActiveRegisteredOracles",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Active registered oracles",
            "schema" : {
              "$ref" : "#/definitions/RegisteredOracles"
            }
          }
        }
      }
    },
    "/oracle-questions" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get active oracle questions",
        "operationId" : "GetOracleQuestions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "oracle_pub_key",
          "in" : "query",
          "description" : "Oracle public key",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Active oracle questions",
            "schema" : {
              "$ref" : "#/definitions/OracleQuestions"
            }
          },
          "404" : {
            "description" : "Oracle not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oracle-register-tx" : {
      "post" : {
        "tags" : [ "internal" ],
        "description" : "Create oracle register transaction",
        "operationId" : "PostOracleRegisterTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Creates new oracle register transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OracleRegisterTx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "404" : {
            "description" : "Oracle register transaction validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oracle-query-tx" : {
      "post" : {
        "tags" : [ "internal" ],
        "description" : "Create oracle query transaction",
        "operationId" : "PostOracleQueryTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Creates new oracle query transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OracleQueryTx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/OracleQueryId"
            }
          },
          "404" : {
            "description" : "Oracle query transaction validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/oracle-response-tx" : {
      "post" : {
        "tags" : [ "internal" ],
        "description" : "Create oracle response transaction",
        "operationId" : "PostOracleResponseTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Creates new oracle response transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/OracleResponseTx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation"
          },
          "404" : {
            "description" : "Oracle response transaction validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/name-preclaim-tx" : {
      "post" : {
        "tags" : [ "internal" ],
        "description" : "Create name preclaim transaction",
        "operationId" : "PostNamePreclaimTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Creates new name preclaim transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NamePreclaimTx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NameCommitmentHash"
            }
          },
          "400" : {
            "description" : "Name preclaim transaction validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Account not found error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/name-claim-tx" : {
      "post" : {
        "tags" : [ "internal" ],
        "description" : "Create name claim transaction",
        "operationId" : "PostNameClaimTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Creates new name claim transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NameClaimTx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NameHash"
            }
          },
          "400" : {
            "description" : "Name claim transaction validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Account not found error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/name-update-tx" : {
      "post" : {
        "tags" : [ "internal" ],
        "description" : "Create name update transaction",
        "operationId" : "PostNameUpdateTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Creates new name update transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NameUpdateTx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NameHash"
            }
          },
          "400" : {
            "description" : "Name update transaction validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Account not found error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/name-transfer-tx" : {
      "post" : {
        "tags" : [ "internal" ],
        "description" : "Create name transfer transaction",
        "operationId" : "PostNameTransferTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Creates new name transfer transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NameTransferTx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NameHash"
            }
          },
          "400" : {
            "description" : "Name transfer transaction validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Account not found error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/name-revoke-tx" : {
      "post" : {
        "tags" : [ "internal" ],
        "description" : "Create name revoke transaction",
        "operationId" : "PostNameRevokeTx",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Creates new name revoke transaction",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NameRevokeTx"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/NameHash"
            }
          },
          "400" : {
            "description" : "Name revoke transaction validation error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Account not found error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/pub-key" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get user's public key address",
        "operationId" : "GetPubKey",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PubKey"
            }
          },
          "404" : {
            "description" : "No key pair",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/balance/{account_pubkey}" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get accounts's balance",
        "operationId" : "GetAccountBalance",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "account_pubkey",
          "in" : "path",
          "description" : "Account pubkey to show balance for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "height",
          "in" : "query",
          "description" : "Height of the block to show balance at",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "hash",
          "in" : "query",
          "description" : "Hash of the block to show balance at",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Balance"
            }
          },
          "400" : {
            "description" : "Invalid block hash or hash and height combination",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Block or account not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/balances" : {
      "get" : {
        "tags" : [ "external" ],
        "description" : "Get all users' balances",
        "operationId" : "GetAccountsBalances",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AccountsBalances"
            }
          },
          "403" : {
            "description" : "Balances not enabled",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/version" : {
      "get" : {
        "tags" : [ "external" ],
        "description" : "Get node's version",
        "operationId" : "GetVersion",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Version"
            }
          }
        }
      }
    },
    "/info" : {
      "get" : {
        "tags" : [ "external" ],
        "description" : "Get node info",
        "operationId" : "GetInfo",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Info"
            }
          },
          "403" : {
            "description" : "Info not enabled",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/number" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get the current block's height",
        "operationId" : "GetBlockNumber",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "The current block's height",
            "schema" : {
              "$ref" : "#/definitions/BlockHeight"
            }
          }
        }
      }
    },
    "/block/height/{height}" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get a block by height",
        "operationId" : "GetBlockByHeightInternal",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "height",
          "in" : "path",
          "description" : "Height of the block to fetch",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The block being found",
            "schema" : {
              "$ref" : "#/definitions/GenericBlock"
            }
          },
          "404" : {
            "description" : "Block not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/hash/{hash}" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get a block by hash",
        "operationId" : "GetBlockByHashInternal",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the block to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The block being found",
            "schema" : {
              "$ref" : "#/definitions/GenericBlock"
            }
          },
          "400" : {
            "description" : "Invalid hash",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Block not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/genesis" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get the genesis block",
        "operationId" : "GetBlockGenesis",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The genesis block",
            "schema" : {
              "$ref" : "#/definitions/GenericBlock"
            }
          }
        }
      }
    },
    "/block/latest" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get the top block",
        "operationId" : "GetBlockLatest",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The top block",
            "schema" : {
              "$ref" : "#/definitions/GenericBlock"
            }
          }
        }
      }
    },
    "/block/pending" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get the block being mined",
        "operationId" : "GetBlockPending",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The pending block with invalid nonce and pow evidence",
            "schema" : {
              "$ref" : "#/definitions/GenericBlock"
            }
          },
          "404" : {
            "description" : "No pending block (node not mining)",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/txs/count/hash/{hash}" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get a block transactions count by hash",
        "operationId" : "GetBlockTxsCountByHash",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the block to fetch",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tx_types",
          "in" : "query",
          "description" : "Transactions types to show. Comma separated",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "exclude_tx_types",
          "in" : "query",
          "description" : "Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The count of transactions in the block",
            "schema" : {
              "$ref" : "#/definitions/inline_response_200"
            }
          },
          "400" : {
            "description" : "Invalid hash",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Block not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/txs/count/height/{height}" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get a block transactions count by height",
        "operationId" : "GetBlockTxsCountByHeight",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "height",
          "in" : "path",
          "description" : "Height of the block to fetch",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "tx_types",
          "in" : "query",
          "description" : "Transactions types to show. Comma separated",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "exclude_tx_types",
          "in" : "query",
          "description" : "Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The count of transactions in the block",
            "schema" : {
              "$ref" : "#/definitions/inline_response_200"
            }
          },
          "404" : {
            "description" : "Block not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/txs/count/genesis" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get the genesis block transactions count",
        "operationId" : "GetGenesisBlockTxsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tx_types",
          "in" : "query",
          "description" : "Transactions types to show. Comma separated",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "exclude_tx_types",
          "in" : "query",
          "description" : "Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The count of transactions in the genesis block",
            "schema" : {
              "$ref" : "#/definitions/inline_response_200"
            }
          }
        }
      }
    },
    "/block/txs/count/latest" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get the latest block transactions count",
        "operationId" : "GetLatestBlockTxsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tx_types",
          "in" : "query",
          "description" : "Transactions types to show. Comma separated",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "exclude_tx_types",
          "in" : "query",
          "description" : "Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The count of transactions in the latest block",
            "schema" : {
              "$ref" : "#/definitions/inline_response_200"
            }
          }
        }
      }
    },
    "/block/txs/count/pending" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get the pending block transactions count",
        "operationId" : "GetPendingBlockTxsCount",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tx_types",
          "in" : "query",
          "description" : "Transactions types to show. Comma separated",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "exclude_tx_types",
          "in" : "query",
          "description" : "Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The count of transactions in the pending block",
            "schema" : {
              "$ref" : "#/definitions/inline_response_200"
            }
          }
        }
      }
    },
    "/block/tx/height/{height}/{tx_index}" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get a transaction by index in the block by height",
        "operationId" : "GetTransactionFromBlockHeight",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "height",
          "in" : "path",
          "description" : "Height of the block to search for",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "tx_index",
          "in" : "path",
          "description" : "Index of the transaction in the block",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The transaction found",
            "schema" : {
              "$ref" : "#/definitions/SingleTxObject"
            }
          },
          "404" : {
            "description" : "Block or transaction not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/txs/list/height" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get transactions list from a block range by height",
        "operationId" : "GetTxsListFromBlockRangeByHeight",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "description" : "Height of the block to start the range",
          "required" : true,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Height of the block to end the range",
          "required" : true,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        }, {
          "name" : "tx_types",
          "in" : "query",
          "description" : "Transactions types to show. Comma separated",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "exclude_tx_types",
          "in" : "query",
          "description" : "Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of transactions in block range",
            "schema" : {
              "$ref" : "#/definitions/TxObjects"
            }
          },
          "400" : {
            "description" : "Invalid range",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Range not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/tx/hash/{hash}/{tx_index}" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get a transaction by index in the block by hash",
        "operationId" : "GetTransactionFromBlockHash",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hash",
          "in" : "path",
          "description" : "Hash of the block to search for",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tx_index",
          "in" : "path",
          "description" : "Index of the transaction in the block",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The transaction found",
            "schema" : {
              "$ref" : "#/definitions/SingleTxObject"
            }
          },
          "404" : {
            "description" : "Block or transaction not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/tx/latest/{tx_index}" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get a transaction by index in the latest block",
        "operationId" : "GetTransactionFromBlockLatest",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tx_index",
          "in" : "path",
          "description" : "Index of the transaction in the block",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "The transaction found",
            "schema" : {
              "$ref" : "#/definitions/SingleTxObject"
            }
          },
          "404" : {
            "description" : "Block or transaction not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/block/txs/list/hash" : {
      "get" : {
        "tags" : [ "internal" ],
        "description" : "Get transactions list from a block range by hash",
        "operationId" : "GetTxsListFromBlockRangeByHash",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "from",
          "in" : "query",
          "description" : "Hash of the block to start the range",
          "required" : true,
          "type" : "string",
          "minimum" : 0
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Hash of the block to end the range",
          "required" : true,
          "type" : "string",
          "minimum" : 0
        }, {
          "name" : "tx_encoding",
          "in" : "query",
          "description" : "Transactions encoding",
          "required" : false,
          "type" : "string",
          "default" : "message_pack",
          "enum" : [ "message_pack", "json" ]
        }, {
          "name" : "tx_types",
          "in" : "query",
          "description" : "Transactions types to show. Comma separated",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "exclude_tx_types",
          "in" : "query",
          "description" : "Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The list of transactions in block range",
            "schema" : {
              "$ref" : "#/definitions/TxObjects"
            }
          },
          "400" : {
            "description" : "Invalid range",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Range not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contract/compile" : {
      "post" : {
        "tags" : [ "external" ],
        "description" : "Compila a ring contract from source and return byte code",
        "operationId" : "CompileContract",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "contract code",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Contract"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Byte code response",
            "schema" : {
              "$ref" : "#/definitions/ByteCode"
            }
          },
          "403" : {
            "description" : "Invalid contract",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contract/call" : {
      "post" : {
        "tags" : [ "external" ],
        "description" : "Call a ring function with a given name and argument in the given bytecode off chain.",
        "operationId" : "CallContract",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "contract call",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContractCallInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resulting state map",
            "schema" : {
              "$ref" : "#/definitions/CallResult"
            }
          },
          "403" : {
            "description" : "Invalid contract",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/contract/encode-calldata" : {
      "post" : {
        "tags" : [ "external" ],
        "description" : "Encode ring data and function name according to ring ABI.",
        "operationId" : "EncodeCalldata",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Arguments in ring",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ContractCallInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Binary ecoded calldata",
            "schema" : {
              "$ref" : "#/definitions/Calldata"
            }
          },
          "403" : {
            "description" : "Invalid contract",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "EncodedHash" : {
      "type" : "string"
    },
    "Pow" : {
      "type" : "array",
      "items" : {
        "type" : "integer",
        "format" : "int32"
      }
    },
    "Uri" : {
      "type" : "string"
    },
    "Header" : {
      "type" : "object",
      "properties" : {
        "height" : {
          "type" : "integer",
          "format" : "int64"
        },
        "prev_hash" : {
          "$ref" : "#/definitions/EncodedHash"
        },
        "state_hash" : {
          "$ref" : "#/definitions/EncodedHash"
        },
        "txs_hash" : {
          "$ref" : "#/definitions/EncodedHash"
        },
        "target" : {
          "type" : "integer",
          "format" : "int64"
        },
        "nonce" : {
          "type" : "integer",
          "format" : "uint64"
        },
        "time" : {
          "type" : "integer",
          "format" : "int64"
        },
        "version" : {
          "type" : "integer"
        },
        "pow" : {
          "$ref" : "#/definitions/Pow"
        }
      }
    },
    "Block" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Header"
      }, {
        "type" : "object",
        "properties" : {
          "transactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Tx"
            }
          }
        }
      } ]
    },
    "GenericBlock" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Header"
      }, {
        "type" : "object",
        "required" : [ "data_schema" ],
        "discriminator" : "data_schema",
        "properties" : {
          "data_schema" : {
            "type" : "string"
          },
          "hash" : {
            "$ref" : "#/definitions/EncodedHash"
          }
        }
      } ]
    },
    "BlockWithJSONTxs" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GenericBlock"
      }, {
        "type" : "object",
        "properties" : {
          "transactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SignedTxJSON"
            }
          }
        }
      } ]
    },
    "BlockWithMsgPackTxs" : {
      "allOf" : [ {
        "$ref" : "#/definitions/GenericBlock"
      }, {
        "type" : "object",
        "properties" : {
          "transactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Tx"
            }
          }
        }
      } ]
    },
    "Top" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Header"
      }, {
        "type" : "object",
        "properties" : {
          "hash" : {
            "type" : "string"
          }
        }
      } ]
    },
    "TxObjects" : {
      "type" : "object",
      "required" : [ "data_schema" ],
      "discriminator" : "data_schema",
      "properties" : {
        "data_schema" : {
          "type" : "string"
        }
      },
      "example" : {
        "data_schema" : "data_schema"
      }
    },
    "MsgPackTxs" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TxObjects"
      }, {
        "type" : "object",
        "properties" : {
          "transactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Tx"
            }
          }
        }
      } ]
    },
    "JSONTxs" : {
      "allOf" : [ {
        "$ref" : "#/definitions/TxObjects"
      }, {
        "type" : "object",
        "properties" : {
          "transactions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SignedTxJSON"
            }
          }
        }
      } ]
    },
    "Ping" : {
      "type" : "object",
      "required" : [ "best_hash", "difficulty", "genesis_hash", "source" ],
      "properties" : {
        "source" : {
          "type" : "string"
        },
        "genesis_hash" : {
          "type" : "string"
        },
        "best_hash" : {
          "type" : "string"
        },
        "difficulty" : {
          "type" : "number"
        },
        "share" : {
          "type" : "integer",
          "maximum" : 32
        },
        "peers" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Uri"
          }
        }
      },
      "example" : {
        "difficulty" : 0.80082819046101150206595775671303272247314453125,
        "genesis_hash" : "genesis_hash",
        "peers" : [ { }, { } ],
        "best_hash" : "best_hash",
        "share" : 19,
        "source" : "source"
      }
    },
    "Balance" : {
      "type" : "object",
      "properties" : {
        "balance" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "balance" : 0
      }
    },
    "Tx" : {
      "type" : "object",
      "properties" : {
        "tx" : {
          "type" : "string"
        }
      },
      "example" : {
        "tx" : "tx"
      }
    },
    "Transactions" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/Tx"
      }
    },
    "RegisteredOracles" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/RegisteredOracles_inner"
      }
    },
    "OracleQuestions" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/OracleQuestions_inner"
      }
    },
    "SpendTx" : {
      "type" : "object",
      "properties" : {
        "recipient_pubkey" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "integer",
          "format" : "int64"
        },
        "fee" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "amount" : 0,
        "fee" : 6,
        "recipient_pubkey" : "recipient_pubkey"
      }
    },
    "OracleRegisterTx" : {
      "type" : "object",
      "properties" : {
        "query_format" : {
          "type" : "string"
        },
        "response_format" : {
          "type" : "string"
        },
        "query_fee" : {
          "type" : "integer",
          "format" : "int64"
        },
        "fee" : {
          "type" : "integer",
          "format" : "int64"
        },
        "ttl" : {
          "$ref" : "#/definitions/TTL"
        }
      },
      "example" : {
        "response_format" : "response_format",
        "fee" : 6,
        "query_fee" : 0,
        "ttl" : {
          "type" : "delta",
          "value" : 1
        },
        "query_format" : "query_format"
      }
    },
    "OracleQueryTx" : {
      "type" : "object",
      "properties" : {
        "oracle_pubkey" : {
          "type" : "string"
        },
        "query" : {
          "type" : "string"
        },
        "query_fee" : {
          "type" : "integer",
          "format" : "int64"
        },
        "query_ttl" : {
          "$ref" : "#/definitions/TTL"
        },
        "response_ttl" : {
          "$ref" : "#/definitions/RelativeTTL"
        },
        "fee" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "response_ttl" : {
          "type" : "delta",
          "value" : 6
        },
        "query" : "query",
        "query_ttl" : {
          "type" : "delta",
          "value" : 1
        },
        "fee" : 1,
        "query_fee" : 0,
        "oracle_pubkey" : "oracle_pubkey"
      }
    },
    "OracleResponseTx" : {
      "type" : "object",
      "properties" : {
        "query_id" : {
          "type" : "string"
        },
        "response" : {
          "type" : "string"
        },
        "fee" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "query_id" : "query_id",
        "response" : "response",
        "fee" : 0
      }
    },
    "TTL" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "delta", "block" ]
        },
        "value" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "type" : "delta",
        "value" : 1
      }
    },
    "RelativeTTL" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "delta" ]
        },
        "value" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "type" : "delta",
        "value" : 6
      }
    },
    "OracleQueryId" : {
      "type" : "object",
      "properties" : {
        "query_id" : {
          "type" : "string"
        }
      },
      "example" : {
        "query_id" : "query_id"
      }
    },
    "NameEntry" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "name_ttl" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pointers" : {
          "type" : "string"
        }
      },
      "example" : {
        "name_ttl" : 0,
        "name" : "name",
        "pointers" : "pointers"
      }
    },
    "NamePreclaimTx" : {
      "type" : "object",
      "required" : [ "commitment", "fee" ],
      "properties" : {
        "commitment" : {
          "type" : "string"
        },
        "fee" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "fee" : 0,
        "commitment" : "commitment"
      }
    },
    "NameClaimTx" : {
      "type" : "object",
      "required" : [ "fee", "name", "name_salt" ],
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "name_salt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "fee" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "name_salt" : 0,
        "fee" : 6,
        "name" : "name"
      }
    },
    "NameUpdateTx" : {
      "type" : "object",
      "required" : [ "fee", "name_hash", "name_ttl", "pointers", "ttl" ],
      "properties" : {
        "name_hash" : {
          "type" : "string"
        },
        "name_ttl" : {
          "type" : "integer",
          "format" : "int64"
        },
        "pointers" : {
          "type" : "string"
        },
        "ttl" : {
          "type" : "integer",
          "format" : "int64"
        },
        "fee" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "name_ttl" : 0,
        "name_hash" : "name_hash",
        "fee" : 1,
        "ttl" : 6,
        "pointers" : "pointers"
      }
    },
    "NameTransferTx" : {
      "type" : "object",
      "required" : [ "fee", "name_hash", "recipient_pubkey" ],
      "properties" : {
        "name_hash" : {
          "type" : "string"
        },
        "recipient_pubkey" : {
          "type" : "string"
        },
        "fee" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "name_hash" : "name_hash",
        "fee" : 0,
        "recipient_pubkey" : "recipient_pubkey"
      }
    },
    "NameRevokeTx" : {
      "type" : "object",
      "required" : [ "fee", "name_hash" ],
      "properties" : {
        "name_hash" : {
          "type" : "string"
        },
        "fee" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "name_hash" : "name_hash",
        "fee" : 0
      }
    },
    "NameCommitmentHash" : {
      "type" : "object",
      "properties" : {
        "commitment" : {
          "type" : "string"
        }
      },
      "example" : {
        "commitment" : "commitment"
      }
    },
    "NameHash" : {
      "type" : "object",
      "properties" : {
        "name_hash" : {
          "type" : "string"
        }
      },
      "example" : {
        "name_hash" : "name_hash"
      }
    },
    "PubKey" : {
      "type" : "object",
      "properties" : {
        "pub_key" : {
          "type" : "string"
        }
      },
      "example" : {
        "pub_key" : "pub_key"
      }
    },
    "AccountsBalances" : {
      "type" : "object",
      "properties" : {
        "accounts_balances" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AccountBalance"
          }
        }
      },
      "example" : {
        "accounts_balances" : [ {
          "balance" : 0,
          "pub_key" : "pub_key"
        }, {
          "balance" : 0,
          "pub_key" : "pub_key"
        } ]
      }
    },
    "AccountBalance" : {
      "type" : "object",
      "properties" : {
        "pub_key" : {
          "type" : "string"
        },
        "balance" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "example" : {
        "balance" : 0,
        "pub_key" : "pub_key"
      }
    },
    "Version" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "revision" : {
          "type" : "string"
        },
        "genesis_hash" : {
          "type" : "string"
        }
      },
      "example" : {
        "genesis_hash" : "genesis_hash",
        "version" : "version",
        "revision" : "revision"
      }
    },
    "Info" : {
      "type" : "object",
      "properties" : {
        "last_30_blocks_time" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BlockTimeSummary"
          }
        }
      },
      "example" : {
        "last_30_blocks_time" : [ {
          "difficulty" : 5.962133916683182377482808078639209270477294921875,
          "time" : 6,
          "time_delta_to_parent" : 1,
          "height" : 0
        }, {
          "difficulty" : 5.962133916683182377482808078639209270477294921875,
          "time" : 6,
          "time_delta_to_parent" : 1,
          "height" : 0
        } ]
      }
    },
    "BlockTimeSummary" : {
      "type" : "object",
      "properties" : {
        "height" : {
          "type" : "integer",
          "format" : "int64"
        },
        "time" : {
          "type" : "integer",
          "format" : "int64"
        },
        "time_delta_to_parent" : {
          "type" : "integer",
          "format" : "int64"
        },
        "difficulty" : {
          "type" : "number"
        }
      },
      "example" : {
        "difficulty" : 5.962133916683182377482808078639209270477294921875,
        "time" : 6,
        "time_delta_to_parent" : 1,
        "height" : 0
      }
    },
    "BlockHeight" : {
      "type" : "object",
      "required" : [ "height" ],
      "properties" : {
        "height" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Blocks's height"
        }
      },
      "example" : {
        "height" : 0
      }
    },
    "SingleTxObject" : {
      "type" : "object",
      "required" : [ "data_schema" ],
      "discriminator" : "data_schema",
      "properties" : {
        "data_schema" : {
          "type" : "string"
        }
      },
      "example" : {
        "data_schema" : "data_schema"
      }
    },
    "SingleTxJSON" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SingleTxObject"
      }, {
        "type" : "object",
        "required" : [ "transaction" ],
        "properties" : {
          "transaction" : {
            "$ref" : "#/definitions/SignedTxJSON"
          }
        }
      } ]
    },
    "SingleTxMsgPack" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SingleTxObject"
      }, {
        "type" : "object",
        "required" : [ "transaction" ],
        "properties" : {
          "transaction" : {
            "$ref" : "#/definitions/Tx"
          }
        }
      } ]
    },
    "SignedTxJSON" : {
      "type" : "object",
      "properties" : {
        "tx" : {
          "$ref" : "#/definitions/JSONTx"
        },
        "block_height" : {
          "type" : "integer"
        },
        "block_hash" : {
          "$ref" : "#/definitions/JSONTx"
        },
        "signatures" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "minItems" : 1
        }
      }
    },
    "JSONTx" : {
      "type" : "object",
      "required" : [ "data_schema" ],
      "discriminator" : "data_schema",
      "properties" : {
        "data_schema" : {
          "type" : "string"
        },
        "vsn" : {
          "type" : "integer"
        }
      }
    },
    "CoinbaseTxJSON" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object"
      } ]
    },
    "SpendTxJSON" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object"
      } ]
    },
    "OracleRegisterTxJSON" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object",
        "required" : [ "ttl" ],
        "properties" : {
          "ttl" : {
            "$ref" : "#/definitions/TTL"
          }
        }
      } ]
    },
    "OracleQueryTxJSON" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object",
        "required" : [ "query_ttl", "response_ttl" ],
        "properties" : {
          "query_ttl" : {
            "$ref" : "#/definitions/TTL"
          },
          "response_ttl" : {
            "$ref" : "#/definitions/TTL"
          }
        }
      } ]
    },
    "OracleResponseTxJSON" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object",
        "properties" : {
          "query_ttl" : {
            "$ref" : "#/definitions/TTL"
          },
          "response_ttl" : {
            "$ref" : "#/definitions/TTL"
          }
        }
      } ]
    },
    "NamePreclaimTxObject" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object"
      } ]
    },
    "NameClaimTxObject" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object"
      } ]
    },
    "NameUpdateTxObject" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object"
      } ]
    },
    "NameTransferTxObject" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object"
      } ]
    },
    "NameRevokeTxObject" : {
      "allOf" : [ {
        "$ref" : "#/definitions/JSONTx"
      }, {
        "type" : "object"
      } ]
    },
    "Error" : {
      "type" : "object",
      "properties" : {
        "reason" : {
          "type" : "string"
        }
      }
    },
    "Contract" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "options" : {
          "type" : "string"
        }
      },
      "example" : {
        "code" : "code",
        "options" : "options"
      }
    },
    "ByteCode" : {
      "type" : "object"
    },
    "ContractCallInput" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "function" : {
          "type" : "string"
        },
        "arg" : {
          "type" : "string"
        }
      },
      "example" : {
        "code" : "code",
        "function" : "function",
        "arg" : "arg"
      }
    },
    "CallResult" : {
      "type" : "object",
      "properties" : {
        "out" : {
          "type" : "string"
        }
      },
      "example" : {
        "out" : "out"
      }
    },
    "Calldata" : {
      "type" : "object",
      "properties" : {
        "calldata" : {
          "type" : "string"
        }
      },
      "example" : {
        "calldata" : "calldata"
      }
    },
    "inline_response_200" : {
      "properties" : {
        "count" : {
          "type" : "integer",
          "description" : "Count"
        }
      },
      "example" : {
        "count" : 0
      }
    },
    "RegisteredOracles_inner" : {
      "properties" : {
        "address" : {
          "type" : "string"
        },
        "query_format" : {
          "type" : "string"
        },
        "response_format" : {
          "type" : "string"
        },
        "query_fee" : {
          "type" : "string"
        },
        "expires_at" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "OracleQuestions_inner" : {
      "properties" : {
        "query_id" : {
          "type" : "string"
        },
        "query" : {
          "type" : "string"
        },
        "query_fee" : {
          "type" : "string"
        },
        "expires_at" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Aeternity",
    "url" : "http://www.aeternity.com"
  }
}
