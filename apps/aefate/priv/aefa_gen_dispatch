#!/usr/bin/env escript
%% -*- erlang-indent-level: 4; indent-tabs-mode: nil -*-
%%
%% Helper to generate code for eval dispatch.
%% Could be extended with fetching and writing arguments
%% and checking types in the future.
%%
-mode(compile).

main(Args) ->
    {ShowHelp, OutFile} = process_args(Args),
    maybe_show_help(ShowHelp),
    do_main(OutFile).

usage() ->
    io:format("Usage: aefa_gen_dispatch [--help | OUT_FILE]~n", []).

process_args(["--help" | _]) ->
    {true, nil};
process_args([OutFile]) ->
    {false, OutFile};
process_args(_) ->
    {true, nil}.

maybe_show_help(true) ->
    usage(),
    halt(0);
maybe_show_help(false) ->
    ok.

do_main(Filename) ->
    {ok, File} = file:open(Filename, [write]),
    Ops = aeb_fate_generate_ops:get_ops(),
    Instructions = lists:flatten([gen_eval(Op)++"\n" || Op <- Ops]),
    io:format(File,
	      "%%\n%% This file is generated. Any modifications will be overwritten.\n%%\n"
	      "-module(aefa_fate_eval).\n\n"
	      "-export([eval/2]).\n\n"
              "~s"
              "eval(Op, _EngineState) ->\n"
              "    throw({error, unknown_op, Op}).\n"
             , [Instructions]),
    io:format(File, "\n", []),
    file:close(File).

gen_eval(#{ opname            := Name
          , end_bb            := true
          , format            := atomic
          , constructor       := Constructor
          }) ->
    io_lib:format(
      "eval(~w, EngineState) ->\n"
      "    aefa_fate_op:~w(EngineState);\n",
      [Name, Constructor]);
gen_eval(#{ opname            := Name
          , format            := atomic
          , constructor       := Constructor
          }) ->
    io_lib:format(
      "eval(~w, EngineState) ->\n"
      "    {next, aefa_fate_op:~w(EngineState)};\n",
      [Name, Constructor]);
gen_eval(#{ opname            := Name
          , opcode            :=_OpCode
          , args              := Arity
          , end_bb            := true
          , format            := FateFormat
          , macro             :=_Macro
          , type_name         :=_TypeName
          , doc               :=_Doc
          , gas               :=_Gas
          , type              :=_Type
          , constructor       := Constructor
          , constructor_type  :=_ConstructorType
          }) ->
    Args  = gen_arg_matches(FateFormat, 0),
    CArgs = [io_lib:format("Arg~w, ", [N]) || N <- lists:seq(0, Arity-1)],
    io_lib:format(
      "eval({~w ~s}, EngineState) ->\n"
      "    aefa_fate_op:~w(~sEngineState);\n",
      [Name, Args, Constructor, CArgs]);
gen_eval(#{ opname            := Name
          , opcode            :=_OpCode
          , args              := Arity
          , end_bb            := false
          , format            := FateFormat
          , macro             :=_Macro
          , type_name         :=_TypeName
          , doc               :=_Doc
          , gas               :=_Gas
          , type              :=_Type
          , constructor       := Constructor
          , constructor_type  :=_ConstructorType
          }) ->
    Args  = gen_arg_matches(FateFormat, 0),
    CArgs = [io_lib:format("Arg~w, ", [N]) || N <- lists:seq(0, Arity-1)],
    io_lib:format(
      "eval({~w ~s}, EngineState) ->\n"
      "    {next, aefa_fate_op:~w(~sEngineState)};\n",
      [Name, Args, Constructor, CArgs]).



gen_arg_matches([], _) ->
    "";
gen_arg_matches([ a | Rest], N) ->
    io_lib:format(", Arg~w", [N]) ++ gen_arg_matches(Rest, N+1);
gen_arg_matches([is | Rest], N) ->
    io_lib:format(", {immediate, Arg~w}", [N]) ++ gen_arg_matches(Rest, N+1);
gen_arg_matches([li | Rest], N) ->
    io_lib:format(", {immediate, Arg~w}", [N]) ++ gen_arg_matches(Rest, N+1);
gen_arg_matches([ii | Rest], N) ->
    io_lib:format(", {immediate, Arg~w}", [N]) ++ gen_arg_matches(Rest, N+1).


