/*
 * A simple crowd-funding example
 */
contract FundMe =

  type state = { contributions : map(address, uint),
                 total         : uint,
                 beneficiary   : address,
                 deadline      : uint,
                 goal          : uint }

  private function require(b : bool, err : string) =
    if(!b) abort(err)

  public function init(beneficiary, deadline, goal) : state =
    { contributions = Map.empty,
      beneficiary   = beneficiary,
      deadline      = deadline,
      total         = 0,
      goal          = goal }

  private function is_contributor(addr) =
    Map.member(addr, state.contributions)

  public stateful function contribute() =
    require(chain.height < deadline, "Deadline has passed")
    let amount =
      switch(Map.lookup(call.caller, state.contributions))
        None    => call.amount
        Some(n) => n + call.amount
    put(state{ contributions[call.caller] = amount,
               total = state.total + call.amount })

  public stateful function withdraw() =
    require(chain.height >= deadline, "Cannot withdraw before deadline")
    if(call.caller == state.beneficiary)
      withdraw_beneficiary()
    elif(is_contributor(call.caller))
      withdraw_contributor()
    else
      abort("Not a contributor or beneficiary")

  private stateful function withdraw_beneficiary() =
    require(state.total >= state.goal, "Project was not funded")
    transaction(SpendTx({recipient = state.beneficiary,
                         amount    = state.total }))
    put(state{ beneficiary = #0 })

  private stateful function withdraw_contributor() =
    require(state.total < state.goal, "Project was funded")
    let to = call.caller
    transaction(SpendTx({recipient = to,
                         amount    = state.contributions[to]}))
    put(state{ contributions[to] = 0 })

