contract Oracles =

  function registerOracle(acct : address,
                          sign : signature,   // Signed account address
                          fee  : int,
                          qfee : int,
                          ttl  : int) : oracle(string, int) =
     Oracle.register(acct, sign, fee, qfee, ttl)

  function queryFee(o : oracle(string, int)) : int =
    Oracle.query_fee(o)

  function createQuery(o    : oracle(string, int),
                       q    : string,
                       qfee  : int,
                       qttl : int,
                       rttl : int) : oracle_query(string, int) =
    Oracle.query(o, q, qfee, qttl, rttl)

  function extendOracle(o    : oracle(string, int),
                        sign : signature,   // Signed oracle address
                        fee  : int,
                        ttl  : int) : () =
    Oracle.extend(o, sign, fee, ttl)

  function respond(o    : oracle(string, int),
                   q    : oracle_query(string, int),
                   sign : signature,
                   r    : int) =
    Oracle.respond(o, q, sign, r)

  function getQuestion(o : oracle(string, int),
                       q : oracle_query(string, int)) : string =
    Oracle.get_question(o, q)

  function hasAnswer(o : oracle(string, int),
                     q : oracle_query(string, int)) =
    switch(Oracle.get_answer(o, q))
      None    => false
      Some(_) => true

  function getAnswer(o : oracle(string, int),
                     q : oracle_query(string, int)) : option(int) =
    Oracle.get_answer(o, q)

  datatype complexQuestion = Why(int) | How(string)
  datatype complexAnswer   = NoAnswer | Answer(complexQuestion, string, int)

  function complexOracle(question, sig) =
    let o = Oracle.register(Contract.address, sig, 0, 0, 1000) : oracle(complexQuestion, complexAnswer)
    let q = Oracle.query(o, question, 0, 100, 100)
    Oracle.respond(o, q, sig, Answer(question, "magic", 1337))
    Oracle.get_answer(o, q)

