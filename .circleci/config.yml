version: 2

references:
  container_config: &container_config
    docker:
      - image: aeternity/builder
        user: builder
    working_directory: ~/epoch
    environment:
      # CircleCI supported versions: https://circleci.com/docs/2.0/building-docker-images/#docker-version
      # Official docker versions: https://download.docker.com/linux/static/stable/x86_64/
      DOCKER_CLIENT_VERSION: "17.09.0-ce"
      DOCKERHUB_REPO: aeternity/epoch

  machine_config: &machine_config
    machine:
      docker_layer_caching: true
    working_directory: ~/epoch
    environment:
      DOCKERHUB_REPO: aeternity/epoch

  setup_remote_docker: &setup_remote_docker
    setup_remote_docker:
      docker_layer_caching: true
      version: "17.09.0-ce"

  install_docker_client: &install_docker_client
    run:
      name: Install Docker client
      command: |
        curl -L -o /tmp/docker-${DOCKER_CLIENT_VERSION:?}.tgz \
          https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_CLIENT_VERSION:?}.tgz
        tar -xz -C /tmp -f /tmp/docker-${DOCKER_CLIENT_VERSION:?}.tgz
        mkdir ~/bin && mv /tmp/docker/docker ~/bin

  install_os_deps: &install_os_deps
    run:
      name: Install OS dependancies
      command: |
        sudo apt-get -qq -y install git curl \
          autoconf build-essential ncurses-dev libssl-dev

  install_otp: &install_otp
    run:
      name: Install OTP
      environment:
        OTP_VERSION: "20.2.3"
      # source: https://github.com/aeternity/docker-builder/blob/master/Dockerfile#L14
      command: |
        OTP_DOWNLOAD_URL="https://github.com/erlang/otp/archive/OTP-${OTP_VERSION}.tar.gz" \
          && curl -fsSL -o otp-src.tar.gz "$OTP_DOWNLOAD_URL" \
          && mkdir otp-src \
          && tar -zxf otp-src.tar.gz -C otp-src --strip-components=1 \
          && cd otp-src \
          && export ERL_TOP=`pwd` \
          && ./otp_build autoconf && ./configure && make -j$(nproc) && sudo make install

  install_libsodium: &install_libsodium
    run:
      name: Install libsodium
      environment:
        LIBSODIUM_VERSION: "1.0.16"
      # source: https://github.com/aeternity/docker-builder/blob/master/Dockerfile#L23
      command: |
        LIBSODIUM_DOWNLOAD_URL="https://github.com/jedisct1/libsodium/releases/download/${LIBSODIUM_VERSION}/libsodium-${LIBSODIUM_VERSION}.tar.gz" \
          && curl -fsSL -o libsodium-src.tar.gz "$LIBSODIUM_DOWNLOAD_URL" \
          && mkdir libsodium-src \
          && tar -zxf libsodium-src.tar.gz -C libsodium-src --strip-components=1 \
          && cd libsodium-src \
          && ./configure && make -j$(nproc) && sudo make install && sudo ldconfig

  rebar_cache_key: &rebar_cache_key rebar-cache-{{ checksum "rebar.lock" }}-{{ checksum "rebar.config" }}
  restore_rebar_cache: &restore_rebar_cache
    restore_cache:
      key: *rebar_cache_key

  build_cache_key: &build_cache_key build-cache-v1-{{ .Revision }}
  restore_build_cache: &restore_build_cache
    restore_cache:
      key: *build_cache_key

  pip_cache_key: &pip_cache_key pip-v1-{{ checksum "deployment/ansible/pip-requirements.txt" }}
  restore_pip_cache: &restore_pip_cache
    restore_cache:
      keys:
        - *pip_cache_key
        - pip-v1

  save_pip_cache: &save_pip_cache
    save_cache:
      key: *pip_cache_key
      paths:
        - ~/.cache/pip

  install_pip_requirements: &install_pip_requirements
    run:
      name: Install PIP Requirements
      command: |
        pip install --user -r deployment/ansible/pip-requirements.txt

  packages_workspace: &packages_workspace /tmp/packages
  set_package_path: &set_package_path
    run:
      name: Set package path
      environment:
        PACKAGES_DIR: *packages_workspace
      command: |
        if [ "$(uname -s)" == "Darwin" ]; then
            PKG_SUFFIX="osx-$(sw_vers -productVersion)"
        elif [ "$(uname -s)" == "Linux" ]; then
            PKG_SUFFIX="ubuntu-"`uname -m`
        fi
        export PACKAGE_TARBALL=${PACKAGES_DIR:?}/epoch-$(cat VERSION)-${PKG_SUFFIX}.tar.gz
        echo "export PACKAGE_TARBALL=${PACKAGE_TARBALL}" >> $BASH_ENV

  build_package: &build_package
    run:
      name: Build Package Tarball
      environment:
        PACKAGES_DIR: *packages_workspace
      command: |
        make prod-package
        mkdir ${PACKAGES_DIR:?}
        mv _build/prod/rel/epoch/epoch-$(cat VERSION).tar.gz ${PACKAGE_TARBALL:?}

  package_tests_workspace: &package_tests_workspace /tmp/package_tests
  test_package: &test_package
    run:
      name: Test Package Tarball
      environment:
        PACKAGES_DIR: *packages_workspace
        PACKAGE_TESTS_DIR: *package_tests_workspace
      command: |
        epmd -daemon
        make python-env
        mkdir ${PACKAGE_TESTS_DIR:?}
        make python-release-test WORKDIR=${PACKAGE_TESTS_DIR:?} TARBALL=${PACKAGE_TARBALL:?}

  store_package_artifacts: &store_package_artifacts
    store_artifacts:
      path: *packages_workspace
      destination: /

  deploy_steps: &deploy_steps
    - checkout
    - *restore_pip_cache
    - *install_pip_requirements
    - *save_pip_cache
    - attach_workspace:
        at: *packages_workspace
    - run:
        name: Deploy
        environment:
          PACKAGES_DIR: *packages_workspace
        command: |
          export PACKAGE=${PACKAGES_DIR:?}/epoch-$(cat VERSION)-ubuntu-x86_64.tar.gz
          cd deployment/ansible
          ansible-playbook --limit="tag_role_epoch:&tag_env_${DEPLOY_ENV:?}" \
            --extra-vars "package=${PACKAGE:?} hosts_group=tag_env_${DEPLOY_ENV:?} env=${DEPLOY_ENV:?}" \
            deploy.yml

  upload_github_release_asset: &upload_github_release_asset
    run:
      name: Upload GitHub Release Asset
      environment:
        PACKAGES_DIR: *packages_workspace
      command: |
        ./deployment/upload-github-release-assets.sh github_api_token=${GITHUB_API_TOKEN:?} \
          owner=${CIRCLE_PROJECT_USERNAME} repo=${CIRCLE_PROJECT_REPONAME} \
          tag=${CIRCLE_TAG} ASSETS=${PACKAGES_DIR:?}/*

  fail_notification: &fail_notification
    run:
      name: Send failure notification
      environment:
        NOTIFY_BRANCH: master
        HOOK_TEMPLATE: |
          {
            "text": "CircleCI job **%s** failed on branch **%s** by @%s",
            "attachments": [
              {
                "title": "Build Link",
                "title_link": "%s",
                "color": "#FAD6D6"
              }
            ]
          }
      command: |
        if [ -n "$CIRCLE_BRANCH" -a "$CIRCLE_BRANCH" = "${NOTIFY_BRANCH:?}" ]; then
          HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
          curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_URL:?} --data "${HOOK_DATA:?}"
        fi
      when: on_fail

jobs:
  build:
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - run:
          name: Build
          command: ./rebar3 as test do release
      - save_cache:
          key: *build_cache_key
          paths:
            - "_build"
            - "apps/aecuckoo/c_src"
            - "apps/aecuckoo/priv/bin"
            - "apps/aecuckoo/priv/lib"
      - save_cache:
          key: *rebar_cache_key
          paths:
            - .cache/rebar3
      - *fail_notification

  test:
    <<: *container_config
    parallelism: 2
    steps:
      - checkout
      - *restore_rebar_cache
      - *restore_build_cache
      - run:
          name: Test
          command: |
            epmd -daemon
            make test CT_TEST_FLAGS="--suite=$(.circleci/split_suites.sh)"
      # Isolates the junit.xml report because additional files in _build/test/logs
      # are somehow causing issue with xunit report upload, parsing and merging
      - run:
          name: move test report
          command: |
            mkdir _build/test/reports
            mv _build/test/logs/junit.xml _build/test/reports/
      - store_test_results:
          path: _build/test/reports
      - store_artifacts:
          path: _build/test/logs
      - *fail_notification

  eunit:
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - *restore_build_cache
      - run:
          name: Test
          command: |
            epmd -daemon
            make eunit
      - *fail_notification

  aevm_tests:
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - *restore_build_cache
      - run:
          name: AEVM Tests
          command: |
            make aevm-test
      - *fail_notification

  static_analysis:
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - *restore_build_cache
      - run: ./rebar3 edoc
      - restore_cache:
          keys:
            - dialyzer-cache-v2-{{ .Branch }}-{{ .Revision }}
            - dialyzer-cache-v2-{{ .Branch }}-
            - dialyzer-cache-v2-
      - run:
          name: Update dialyzer PLT
          command: make dialyzer-install
      - save_cache:
          key: dialyzer-cache-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - _build/default/rebar3_20.2.3_plt
      - run: make dialyzer
      - run: make swagger-check
      - run: make rebar-lock-check
      - run: ./rebar3 xref || true
      - *fail_notification

  linux_package:
    <<: *container_config
    steps:
      - checkout
      - *set_package_path
      - *build_package
      - *test_package
      - store_artifacts:
          path: /tmp/package_tests/node1/log
      - store_artifacts:
          path: /tmp/package_tests/node2/log
      - store_artifacts:
          path: /tmp/package_tests/node3/log
      - *store_package_artifacts
      - persist_to_workspace:
          root: *packages_workspace
          paths:
            - "*.tar.gz"
      - *fail_notification

  deploy_api_docs:
    <<: *container_config
    steps:
      - checkout
      - run:
          name: Deploy API docs
          command: ./deployment/deploy_api_docs.sh

  osx_package:
    macos:
      xcode: "9.0"
    working_directory: ~/epoch
    steps:
      - checkout
      - run:
          name: Install required tools
          command: |
            brew update
            brew install libsodium
            brew install file://`pwd`/deployment/homebrew/erlang.rb
      - *set_package_path
      - *build_package
      - *test_package
      - store_artifacts:
          path: /tmp/package_tests/node1/log
      - store_artifacts:
          path: /tmp/package_tests/node2/log
      - store_artifacts:
          path: /tmp/package_tests/node3/log
      - *store_package_artifacts
      - persist_to_workspace:
          root: *packages_workspace
          paths:
            - "*.tar.gz"
      - *fail_notification

  uat_tests:
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - *restore_build_cache
      - run:
          name: UAT Tests
          command: |
            epmd -daemon
            make python-env && make multi-build
            make python-uats
      - run:
          name: Prepare JUnit Report
          command: mv py/nosetests.xml py/junit.xml
      - store_test_results:
          path: py
      - store_artifacts:
          path: _build/dev1/rel/epoch/log
          destination: node1/
      - store_artifacts:
          path: _build/dev2/rel/epoch/log
          destination: node2/
      - store_artifacts:
          path: _build/dev3/rel/epoch/log
          destination: node3/
      - *fail_notification

  docker_image_build:
    <<: *container_config
    steps:
      - checkout
      - *setup_remote_docker
      - *install_docker_client
      - run:
          name: Build Docker image
          command: |
            ~/bin/docker build .

  docker_push_tag:
    <<: *container_config
    steps:
      - checkout
      - *setup_remote_docker
      - *install_docker_client
      - run:
          name: Build and push Docker image to DockerHub
          command: |
            ~/bin/docker login -u $DOCKER_USER -p $DOCKER_PASS
            ~/bin/docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?} -t ${DOCKERHUB_REPO:?}:latest .
            ~/bin/docker push ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?}
            ~/bin/docker push ${DOCKERHUB_REPO:?}:latest

  docker_push_dev:
    <<: *container_config
    steps:
      - checkout
      - *setup_remote_docker
      - *install_docker_client
      - run:
          name: Build and push Docker image to DockerHub
          command: |
            ~/bin/docker login -u $DOCKER_USER -p $DOCKER_PASS
            ~/bin/docker build -t ${DOCKERHUB_REPO:?}:dev .
            ~/bin/docker push ${DOCKERHUB_REPO:?}:dev
      - *fail_notification

  uat_chain_snapshot:
    <<: *container_config
    steps:
      - checkout
      - *restore_pip_cache
      - *install_pip_requirements
      - *save_pip_cache
      - run:
          name: Snapshot of UAT blockchain
          command: |
            cd deployment/ansible
            ansible-playbook --limit="tag_role_epoch:&tag_env_uat" \
              --extra-vars "download_dir=/tmp/chain_snapshots backup_suffix=uat_db_backup_$(date +%s)" \
              mnesia_backup.yml
      - store_artifacts:
          path: /tmp/chain_snapshots

  docker_system_tests:
    <<: *machine_config
    steps:
      - checkout
      - *install_os_deps
      - *install_otp
      - *install_libsodium
      - run:
          name: Build local docker image
          command: |
            docker build -t ${DOCKERHUB_REPO:?}:local .
      - run:
          name: Prepare suitable user to run tests
          command: |
            sudo usermod -aG docker ubuntu
            sudo chown -R ubuntu:ubuntu ~/epoch
      - run:
          name: Install system tests dependancies
          command: |
            sudo -u ubuntu -E -H make system-test-deps
      - run:
          name: System Tests
          no_output_timeout: 2h
          command: |
            sudo -u ubuntu -E -H make system-test
      - *fail_notification
      - store_test_results:
          path: system_test/logs
      - store_artifacts:
          path: system_test/logs

  deploy_integration:
    <<: *container_config
    environment:
      - DEPLOY_ENV: integration
    steps: *deploy_steps

  deploy_dev1:
    <<: *container_config
    environment:
      - DEPLOY_ENV: dev1
    steps: *deploy_steps

  deploy_dev2:
    <<: *container_config
    environment:
      - DEPLOY_ENV: dev2
    steps: *deploy_steps

  deploy_uat:
    <<: *container_config
    environment:
      - DEPLOY_ENV: uat
    steps: *deploy_steps

  deploy_fast_integration:
    <<: *container_config
    environment:
      - DEPLOY_ENV: fast_integration
    steps: *deploy_steps

  github_release_osx:
    <<: *container_config
    steps:
      - checkout
      - attach_workspace:
          at: *packages_workspace
      - *upload_github_release_asset

  github_release_linux:
    <<: *container_config
    steps:
      - checkout
      - attach_workspace:
          at: *packages_workspace
      - *upload_github_release_asset

# CircleCI skips a job for a tag by default.
# A job must have a filters tags section to run as a part of a tag push
# and all its transitively dependent jobs must also have a filters tags section.
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/

      - docker_image_build:
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - master

      - deploy_api_docs:
          requires:
            - static_analysis
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/

      - test:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/

      - eunit:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/

      - aevm_tests:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/

      - uat_tests:
          requires:
            - build

      - static_analysis:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
            tags:
              only: /^v.*$/

      - linux_package:
          filters:
            tags:
              only: /^v.*$/

      - osx_package:
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/

      - deploy_integration:
          requires:
            - test
            - eunit
            - aevm_tests
            - uat_tests
            - static_analysis
            - linux_package
          filters:
            branches:
              only: master

      - docker_push_dev:
          requires:
            - test
            - eunit
            - aevm_tests
            - uat_tests
            - static_analysis
          filters:
            branches:
              only: master

      - deploy_dev1:
          requires:
            - linux_package
          filters:
            branches:
              only: env/dev1

      - deploy_dev2:
          requires:
            - linux_package
          filters:
            branches:
              only: env/dev2

      - hodl:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/

      - deploy_uat:
          requires:
            - eunit
            - static_analysis
            - linux_package
            - hodl
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/

      - github_release_linux:
          requires:
            - eunit
            - static_analysis
            - linux_package
            - hodl
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/

      - github_release_osx:
          requires:
            - eunit
            - static_analysis
            - osx_package
            - hodl
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/

      - docker_push_tag:
          requires:
            - eunit
            - static_analysis
            - hodl
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/

  chain_snapshots:
    triggers:
      - schedule:
          # run At minute 0 past hour 0 and 12. UTC
          cron: "0 0,12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - uat_chain_snapshot

  nightly_fast_integration_deploy:
    triggers:
      - schedule:
          cron: "0 23 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - linux_package:
          filters:
            branches:
              only: master

      - deploy_fast_integration:
          requires:
            - linux_package
          filters:
            branches:
              only: master

  system_tests:
    triggers:
      - schedule:
          # run at midnight and noon UTC
          cron: "0 0,12 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - docker_system_tests
