version: 2.1

orbs:
  win: circleci/windows@1.0.0

executors:
  infrastructure_container_unstable:
    docker:
      - image: aeternity/infrastructure:latest
  infrastructure_container_stable:
    docker:
      - image: aeternity/infrastructure:stable
  builder_container_stable:
    docker:
      - image: aeternity/builder
        user: builder
  builder_container_1804:
    docker:
      - image: aeternity/builder:1804
        user: builder
  buildpack:
    docker:
      - image: circleci/buildpack-deps:xenial
    environment:
      DOCKERHUB_REPO: aeternity/aeternity

references:
  container_config: &container_config
    resource_class: large
    working_directory: ~/aeternity
    environment:
      OTP_VERSION: 20.3.8.9
  container_otp_plt: &container_otp_plt _build/default/rebar3_20.3.8.9_plt

  container_otp21_config: &container_otp21_config
    docker:
      - image: aeternity/builder:otp21
        user: builder
    working_directory: ~/aeternity
    environment:
      OTP_VERSION: 21.3.8.6
  container_otp21_plt: &container_otp21_plt _build/default/rebar3_21.3.8.6_plt

  infrastructure_config_environment: &infrastructure_config_environment
    resource_class: large
    DOCKERHUB_REPO: aeternity/aeternity
    S3_BUILDS_BUCKET: aeternity-node-builds
    S3_RELEASES_BUCKET: aeternity-node-releases

  infrastructure_config: &infrastructure_config
    resource_class: large
    working_directory: ~/aeternity
    environment:
      <<: *infrastructure_config_environment

  machine_config: &machine_config
    resource_class: large
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    working_directory: ~/aeternity
    environment:
      DOCKERHUB_REPO: aeternity/aeternity

  setup_remote_docker: &setup_remote_docker
    setup_remote_docker:
      docker_layer_caching: true
      version: "17.09.0-ce"

  prepare_ubuntu_user: &prepare_ubuntu_user
    run:
      name: Prepare ubuntu user (1000:1000) to run docker commands
      command: |
        sudo usermod -aG docker ubuntu
        sudo chown -R ubuntu:ubuntu ~/aeternity

  install_os_deps: &install_os_deps
    run:
      name: Install OS dependancies
      command: |
        sudo apt-get update
        sudo apt-get -qq -y install git curl \
          autoconf build-essential ncurses-dev libssl-dev

  install_otp: &install_otp
    run:
      name: Install OTP
      environment:
        # See minimum_otp_vsn in rebar.config
        OTP_VERSION: "20.1"
      command: |
        # Install OTP package deps
        sudo apt-get update && sudo apt-get install libwxbase3.0-dev libwxgtk3.0-dev libsctp1
        # Install OTP binary package
        PACKAGE_NAME=esl-erlang_${OTP_VERSION}-1~ubuntu~xenial_amd64.deb
        OTP_DOWNLOAD_URL=https://packages.erlang-solutions.com/erlang/debian/pool/${PACKAGE_NAME}
        # TODO temporary disable SSL checks on erlang-solutions.com until they fix their certificate
        # FIXME ^^ (multi-editor support :))
        curl -fsSL --insecure -o ${PACKAGE_NAME} "$OTP_DOWNLOAD_URL"
        sudo dpkg -i ${PACKAGE_NAME}

  install_libsodium: &install_libsodium
    run:
      name: Install libsodium
      environment:
        LIBSODIUM_VERSION: "1.0.16"
      # source: https://github.com/aeternity/docker-builder/blob/master/Dockerfile#L23
      command: |
        LIBSODIUM_DOWNLOAD_URL="https://github.com/jedisct1/libsodium/releases/download/${LIBSODIUM_VERSION}/libsodium-${LIBSODIUM_VERSION}.tar.gz" \
          && curl -fsSL -o libsodium-src.tar.gz "$LIBSODIUM_DOWNLOAD_URL" \
          && mkdir libsodium-src \
          && tar -zxf libsodium-src.tar.gz -C libsodium-src --strip-components=1 \
          && cd libsodium-src \
          && ./configure && make -j$(nproc) && sudo make install && sudo ldconfig

  tag_regex: &tag_regex /^v.*$/
  master_branch: &master_branch master

  rebar_cache_key: &rebar_cache_key rebar-cache-{{ checksum "rebar.lock" }}-{{ checksum "rebar.config" }}
  restore_rebar_cache: &restore_rebar_cache
    restore_cache:
      key: *rebar_cache_key

  build_cache_key: &build_cache_key build-cache-v1-{{ .Revision }}
  restore_build_cache: &restore_build_cache
    restore_cache:
      key: *build_cache_key

  build_otp21_cache_key: &build_otp21_cache_key build-otp21-cache-v1-{{ .Revision }}
  restore_build_otp21_cache: &restore_build_otp21_cache
    restore_cache:
      key: *build_otp21_cache_key

  machine_build_cache_key: &machine_build_cache_key machine-build-cache-v8-{{ .Branch }}-{{ .Revision }}
  restore_machine_build_cache: &restore_machine_build_cache
    restore_cache:
      keys:
        - *machine_build_cache_key
        - machine-build-cache-v8-{{ .Branch }}-
        - machine-build-cache-v8-

  save_machine_build_cache: &save_machine_build_cache
    save_cache:
      key: *machine_build_cache_key
      paths:
        - "_build"
        - ".contracts_test_cache"

  macos_package_cache_key: &macos_package_cache_key macos-package-cache-v3
  restore_macos_package_cache: &restore_macos_package_cache
    restore_cache:
      key: *macos_package_cache_key

  save_macos_package_cache: &save_macos_package_cache
    save_cache:
      key: *macos_package_cache_key
      paths:
        - "/usr/local/Homebrew"
        - "/usr/local/opt"
        - "/usr/local/Cellar"

  packages_workspace: &packages_workspace /tmp/packages
  set_package_path: &set_package_path
    run:
      name: Set package path
      environment:
        PACKAGES_DIR: *packages_workspace
      # construct and export PACKAGE_TARBALL environment variable available to all jobs
      command: .circleci/set_package_path.sh

  build_package: &build_package
    run:
      name: Build Package Tarball
      environment:
        PACKAGES_DIR: *packages_workspace
      command: |
        make prod-package
        mkdir ${PACKAGES_DIR:?}
        mv _build/prod/rel/aeternity/aeternity-$(cat VERSION).tar.gz ${PACKAGE_TARBALL:?}

  build_ubuntu_package: &build_ubuntu_package
    run:
      name: Build Ubuntu package (*.deb)
      environment:
        PACKAGES_DIR: *packages_workspace
        # The *clean commands are for work-around in CircleCI
        # Debian/Ubuntu package building (clean issues; fakeroot and
        # rebar3).
        #
        # The debian/rules file has conditional *clean targets based on
        # DEB_SKIP_DH_AUTO_CLEAN.
        #
        # This prevents the presence of broken/dummy debian/rules file without
        # clean targets. For example when running debuild directly without
        # `make prod-deb-package`.
      command: |
        make prod-clean
        make clean
        make distclean
        if [ "$CIRCLE_TAG" ];
        then
          make prod-deb-package DEB_SKIP_DH_AUTO_CLEAN=true ;
        else
          AE_DEB_PKG_VERSION=$(cat VERSION)~git$(date +%Y%m%d%H%M%S).${CIRCLE_SHA1:0:8}-1
          make prod-deb-package DEB_SKIP_DH_AUTO_CLEAN=true AE_DEB_PKG_VERSION=$AE_DEB_PKG_VERSION;
        fi
        mkdir ${PACKAGES_DIR:?}
        mv _build/../../*aeternity-node_$(cat VERSION)*.deb ${PACKAGES_DIR:?}

  package_tests_workspace: &package_tests_workspace /tmp/package_tests
  test_package: &test_package
    run:
      name: Test Package Tarball
      environment:
        PACKAGES_DIR: *packages_workspace
        PACKAGE_TESTS_DIR: *package_tests_workspace
      command: |
        epmd -daemon
        make python-env
        mkdir ${PACKAGE_TESTS_DIR:?}
        make python-package-win32-test python-release-test WORKDIR=${PACKAGE_TESTS_DIR:?} PACKAGE=${PACKAGE_TARBALL:?}

  test_arch_os_dependencies: &test_arch_os_dependencies
    run:
      name: Test architecture or OS specific functions
      command: |
        make test-arch-os-dependencies

  store_package_artifacts: &store_package_artifacts
    store_artifacts:
      path: *packages_workspace
      destination: /

  store_rebar3_crashdump: &store_rebar3_crashdump
    store_artifacts:
      path: rebar3.crashdump

  upload_release_artifacts: &upload_release_artifacts
    run:
      name: Upload release artifacts to central repository (AWS)
      command: |
        envdir /secrets aws s3 cp --acl public-read ${PACKAGE_TARBALL:?} s3://${S3_RELEASES_BUCKET:?}/

  deploy_steps: &deploy_steps
    - checkout
    - *set_package_path
    - attach_workspace:
        at: *packages_workspace
    - run:
        name: Deploy
        environment:
          PACKAGES_DIR: *packages_workspace
        command: |
          export PACKAGE=${PACKAGE_TARBALL:?}
          export DEPLOY_DB_VERSION=$(cat deployment/DB_VERSION)
          cd /infrastructure && make deploy

  upload_github_release_asset: &upload_github_release_asset
    run:
      name: Upload GitHub Release Asset
      environment:
        PACKAGES_DIR: *packages_workspace
      command: |
        envdir /secrets /infrastructure/scripts/upload-github-release-assets.sh github_api_token=${GITHUB_API_TOKEN:?} \
          owner=${CIRCLE_PROJECT_USERNAME} repo=${CIRCLE_PROJECT_REPONAME} \
          tag=${CIRCLE_TAG} ASSETS=${PACKAGES_DIR:?}/*

  fail_notification: &fail_notification
    run:
      name: Send failure notification
      environment:
        NOTIFY_BRANCH: *master_branch
        HOOK_TEMPLATE: |
          {
            "text": "CircleCI job **%s** failed on branch **%s** by @%s",
            "attachments": [
              {
                "title": "Build Link",
                "title_link": "%s",
                "color": "#FAD6D6"
              }
            ]
          }
      command: |
        if [ -n "$CIRCLE_BRANCH" ]; then
          if [ "$CIRCLE_BRANCH" = "${NOTIFY_BRANCH:?}" ]; then
            HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
            curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_URL:?} --data "${HOOK_DATA:?}"
          fi
        fi
      when: on_fail

  fail_notification_system_test: &fail_notification_system_test
    run:
      name: Send failure notification on system test
      environment:
        NOTIFY_BRANCH: *master_branch
        HOOK_TEMPLATE: |
          {
            "text": "CircleCI job **%s** failed on branch **%s** by @%s",
            "attachments": [
              {
                "title": "Build Link",
                "title_link": "%s",
                "color": "#FAD6D6"
              }
            ]
          }
      command: |
        if [ -n "$CIRCLE_BRANCH" ]; then
          if [ "$CIRCLE_BRANCH" = "${NOTIFY_BRANCH:?}" ]; then
            HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
            curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_URL_SYSTEM_TEST:?} --data "${HOOK_DATA:?}"
          fi
        fi
      when: on_fail

  install_system_test_deps: &install_system_test_deps
    run:
      name: Install deps for system tests
      command: |
        make system-test-deps

  install_system_smoke_test_deps: &install_system_smoke_test_deps
    run:
      name: Install deps for system smoke tests
      command: |
        make system-smoke-test-deps

  system_test_logs: &system_test_logs system_test/logs

  print_system_test_host_info: &print_system_test_host_info
    run:
      name: Print system test host information
      command: |
        uname -a
        free -t -m

  system_test_host_logs: &system_test_host_logs /tmp/system_test_host
  collect_system_test_host_logs: &collect_system_test_host_logs
    run:
      name: Collect system test host logs
      environment:
        SYSTEM_TEST_HOST_LOGS_DIR: *system_test_host_logs
      command: |
        mkdir ${SYSTEM_TEST_HOST_LOGS_DIR:?}
        dmesg > ${SYSTEM_TEST_HOST_LOGS_DIR:?}/dmesg.log
      when: always

  test_steps: &test_steps
    - checkout
    - *restore_rebar_cache
    - *restore_build_cache
    - run:
        name: Test
        command: |
          epmd -daemon
          make ${MAKE_TARGET:?} CT_TEST_FLAGS="--suite=$(.circleci/split_suites.sh)"
    # Isolates the junit.xml report because additional files in _build/test/logs
    # are somehow causing issue with xunit report upload, parsing and merging
    - run:
        name: move test report
        command: |
          mkdir _build/test/reports
          mv _build/test/logs/junit.xml _build/test/reports/
    - store_test_results:
        path: _build/test/reports
    - store_artifacts:
        path: _build/test/logs
    - *store_rebar3_crashdump
    - *fail_notification

  eunit_steps: &eunit_steps
    - checkout
    - *restore_rebar_cache
    - *restore_build_cache
    - run:
        name: Test
        command: |
          epmd -daemon
          make ${MAKE_TARGET:?}
    - *store_rebar3_crashdump
    - *fail_notification

  upload_package: &upload_package
    steps:
      - checkout
      - *set_package_path
      - attach_workspace:
          at: *packages_workspace
      - setup_secrets
      - *upload_github_release_asset
      - *upload_release_artifacts

  upload_latest_artifacts: &upload_latest_artifacts
    - checkout
    - *set_package_path
    - setup_secrets
    - attach_workspace:
        at: *packages_workspace
    - run:
        name: Upload build artifacts to central repository (AWS)
        command: |
          envdir /secrets aws s3 cp --acl public-read ${PACKAGE_TARBALL:?} s3://${S3_RELEASES_BUCKET:?}/aeternity-latest-${PKG_SUFFIX:?}.tar.gz
    - *fail_notification

  # Windows
  windows_cache_version: &windows_cache_version "v1"
  windows_artifacts: &windows_artifacts C:\Users\circleci\project\packages
  windows_working_directory: &windows_working_directory C:\Users\circleci\project

  windows_env: &windows_env
    OTP_VERSION: << parameters.otp_version >>
    WIN_OTP_PATH: << parameters.otp_install_path >>
    WIN_MSYS2_ROOT: << parameters.msys_install_path >>
    MSYSCON: defterm
    ANSICON: true
    MSVC_VERSION: 14.22.27905
    VCVARSALL: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall

  windows_container: &windows_container
    executor:
      name: win/vs2019
      shell: cmd.exe
    parameters:
      msys_install_path:
        default: C:\tools\msys64
        type: string
      otp_install_path:
        default: C:\tools\erl
        type: string
      otp_version:
        default: "21.3"
        type: string
    working_directory: *windows_working_directory
    environment: *windows_env

commands:
  setup_secrets:
    steps:
      - run:
          name: Setup environment secrets
          command: cd /infrastructure && make secrets SECRETS_OUTPUT_DIR=/secrets

  docker_login:
    steps:
      - setup_secrets
      - run:
          name: Login to Docker Hub
          command: |
            docker login -u $(</secrets/DOCKER_USER) -p $(</secrets/DOCKER_PASS)

  docker_build_branch:
    steps:
      - run:
          name: Build branch docker image
          command: |
            docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH/\//_} .
      - run:
          name: Start branch docker image
          command: |
            docker run --name ae_${CIRCLE_SHA1:?} ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH/\//_} bin/aeternity console -noinput -network_id ae_test
          background: true
      - run:
          name: Health check
          command: |
            sleep 60 # give it some so that docker health checks kicks in
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' ae_${CIRCLE_SHA1:?})
            echo $STATUS
            [ $STATUS == 'healthy' ]

  restore_windows_package_cache:
    parameters:
      windows_cache_version:
        default: *windows_cache_version
        type: string
    steps:
     - restore_cache:
        keys:
          - windows-package-cache-<< parameters.windows_cache_version >>-{{ .Branch }}-
          - windows-package-cache-<< parameters.windows_cache_version >>-master-
          - windows-package-cache-<< parameters.windows_cache_version >>-

  save_windows_package_cache:
    parameters:
      windows_cache_version:
        type: string
        default: *windows_cache_version
      install_path:
        type: string
    steps:
      - save_cache:
          key: windows-package-cache-<< parameters.windows_cache_version >>-{{ .Branch }}-
          paths:
            - << parameters.install_path >>

  install_win_msys2:
    parameters:
      install_path:
        default: C:\tools\msys64
        type: string
    steps:
      - restore_windows_package_cache
      - run:
          name: Install MSYS2
          command: .circleci\windows\msys2_prepare
      - save_windows_package_cache:
          install_path: << parameters.install_path >>

  restore_windows_erl_cache:
    parameters:
      windows_cache_version:
        default: *windows_cache_version
        type: string
      otp_version:
        type: string
    steps:
      - restore_cache:
          keys:
            - windows-erl<< parameters.otp_version >>-cache-<< parameters.windows_cache_version >>-{{ .Branch }}-
            - windows-erl<< parameters.otp_version >>-cache-<< parameters.windows_cache_version >>-master-
            - windows-erl<< parameters.otp_version >>-cache-<< parameters.windows_cache_version >>-

  save_windows_erl_cache:
    parameters:
      windows_cache_version:
        default: *windows_cache_version
        type: string
      install_path:
        type: string
      otp_version:
        type: string
    steps:
      - save_cache:
          key: windows-erl<< parameters.otp_version >>-cache-<< parameters.windows_cache_version >>-{{ .Branch }}-
          paths:
            - << parameters.install_path >>

  install_win_otp:
    parameters:
      install_path:
        type: string
      otp_version:
        type: string
    steps:
      - restore_windows_erl_cache:
          otp_version: << parameters.otp_version >>
      - run:
          name: Install Erlang/OTP << parameters.otp_version >>
          command: scripts\windows\install_erlang << parameters.otp_version >> << parameters.install_path >>
      - save_windows_erl_cache:
          otp_version: << parameters.otp_version >>
          install_path: << parameters.install_path >>

  windows_install_deps:
    parameters:
      msys_install_path:
        type: string
      otp_install_path:
        type: string
      otp_version:
        type: string
    steps:
      - checkout
      - install_win_otp:
          install_path: << parameters.otp_install_path >>
          otp_version: << parameters.otp_version >>
      - install_win_msys2:
          install_path: << parameters.msys_install_path >>


jobs:
  build:
    executor: builder_container_stable
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - run:
          name: Build
          command: make KIND=test
      - save_cache:
          key: *build_cache_key
          paths:
            - "_build"
      - save_cache:
          key: *rebar_cache_key
          paths:
            - .cache/rebar3
      - *store_rebar3_crashdump
      - *fail_notification

  build_otp21:
    executor: builder_container_stable
    <<: *container_otp21_config
    steps:
      - checkout
      - *restore_rebar_cache
      - run:
          name: Build
          command: make KIND=test
      - save_cache:
          key: *build_otp21_cache_key
          paths:
            - "_build"
      - save_cache:
          key: *rebar_cache_key
          paths:
            - .cache/rebar3
      - *store_rebar3_crashdump
      - *fail_notification

  test_roma:
    executor: builder_container_stable
    <<: *container_config
    parallelism: 3
    environment:
      - MAKE_TARGET: ct-roma
    steps: *test_steps

  test_minerva:
    executor: builder_container_stable
    <<: *container_config
    parallelism: 3
    environment:
      - MAKE_TARGET: ct-minerva
    steps: *test_steps

  test_fortuna:
    executor: builder_container_stable
    <<: *container_config
    parallelism: 3
    environment:
      - MAKE_TARGET: ct-fortuna
    steps: *test_steps

  test_lima:
    executor: builder_container_stable
    <<: *container_config
    parallelism: 3
    environment:
      - MAKE_TARGET: ct-lima
    steps: *test_steps

  test_lima_otp21:
    executor: builder_container_stable
    <<: *container_otp21_config
    parallelism: 3
    environment:
      - MAKE_TARGET: ct-lima
    steps: *test_steps

  test_mnesia_leveled:
    executor: builder_container_stable
    <<: *container_config
    parallelism: 3
    environment:
      - MAKE_TARGET: ct-mnesia-leveled
    steps: *test_steps

  test_mnesia_rocksdb:
    executor: builder_container_stable
    <<: *container_config
    parallelism: 3
    environment:
      - MAKE_TARGET: ct-mnesia-rocksdb
    steps: *test_steps

  eunit_roma:
    executor: builder_container_stable
    <<: *container_config
    environment:
      - MAKE_TARGET: eunit-roma
    steps: *eunit_steps

  eunit_minerva:
    executor: builder_container_stable
    <<: *container_config
    environment:
      - MAKE_TARGET: eunit-minerva
    steps: *eunit_steps

  eunit_fortuna:
    executor: builder_container_stable
    <<: *container_config
    environment:
      - MAKE_TARGET: eunit-fortuna
    steps: *eunit_steps

  eunit_lima:
    executor: builder_container_stable
    <<: *container_config
    environment:
      - MAKE_TARGET: eunit-lima
    steps: *eunit_steps

  aevm_tests:
    executor: builder_container_stable
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - *restore_build_cache
      - run:
          name: AEVM Tests
          command: |
            make aevm-test
      - *store_rebar3_crashdump
      - *fail_notification

  static_analysis:
    executor: builder_container_stable
    <<: *container_config
    steps:
      - checkout
      - run: make dockerignore-check
      - *restore_rebar_cache
      - *restore_build_cache
      - run: ./rebar3 edoc
      - restore_cache:
          keys:
            - dialyzer-cache-v2-{{ .Branch }}-{{ .Revision }}
            - dialyzer-cache-v2-{{ .Branch }}-
            - dialyzer-cache-v2-
      - run:
          name: Update dialyzer PLT
          command: make dialyzer-install
      - save_cache:
          key: dialyzer-cache-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - *container_otp_plt
      - run: make dialyzer
      - run: make python-env
      - run: ./rebar3 xref || true
      - run:
          name: Check OTP version (for effective CI caching)
          # How to retrieve OTP version in installed OTP development system: http://erlang.org/doc/system_principles/versions.html
          command: test "${OTP_VERSION:?}" = $(cat $(erl -noinput -eval 'io:format("~s", [filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])]), init:stop().'))
      - *store_rebar3_crashdump
      - *fail_notification

  static_analysis_otp21:
    <<: *container_otp21_config
    steps:
      - checkout
      - *restore_rebar_cache
      - *restore_build_otp21_cache
      - restore_cache:
          keys:
            - dialyzer-otp21-cache-v2-{{ .Branch }}-{{ .Revision }}
            - dialyzer-otp21-cache-v2-{{ .Branch }}-
            - dialyzer-otp21-cache-v2-
      - run:
          name: Update dialyzer PLT
          command: make dialyzer-install
      - save_cache:
          key: dialyzer-otp21-cache-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - *container_otp21_plt
      - run: make dialyzer
      - run:
          name: Check OTP version (for effective CI caching)
          # How to retrieve OTP version in installed OTP development system: http://erlang.org/doc/system_principles/versions.html
          command: test "${OTP_VERSION:?}" = $(cat $(erl -noinput -eval 'io:format("~s", [filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])]), init:stop().'))
      - *store_rebar3_crashdump
      - *fail_notification

  rebar_lock_check:
    executor: builder_container_stable
    <<: *container_config
    steps:
      - checkout
      - run: make rebar-lock-check
      - *store_rebar3_crashdump
      - *fail_notification

  linux_package:
    executor: builder_container_stable
    <<: *container_config
    steps:
      - checkout
      - *set_package_path
      - *test_arch_os_dependencies
      - *build_package
      - *test_package
      - store_artifacts:
          path: /tmp/package_tests/node1/log
      - store_artifacts:
          path: /tmp/package_tests/node2/log
      - store_artifacts:
          path: /tmp/package_tests/node3/log
      - *store_package_artifacts
      - *store_rebar3_crashdump
      - persist_to_workspace:
          root: *packages_workspace
          paths:
            - "*.tar.gz"
      - *fail_notification

  ubuntu_package:
    executor: builder_container_1804
    <<: *container_config
    working_directory: ~/aeternity_deb
    steps:
      - checkout
      - *build_ubuntu_package
      - *store_package_artifacts
      - *fail_notification

  upload_build_artifacts:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    steps:
      - checkout
      - *set_package_path
      - setup_secrets
      - attach_workspace:
          at: *packages_workspace
      - run:
          name: Upload build artifacts to central repository (AWS)
          command: |
            envdir /secrets aws s3 cp --acl public-read ${PACKAGE_TARBALL:?} s3://${S3_BUILDS_BUCKET:?}/
            if [ -n "$CIRCLE_BRANCH" -a "$CIRCLE_BRANCH" = "master" ]; then
              envdir /secrets aws s3 cp --acl public-read ${PACKAGE_TARBALL:?} s3://${S3_BUILDS_BUCKET:?}/aeternity-latest-${PKG_SUFFIX:?}.tar.gz
            fi
      - *fail_notification

  osx_package:
    macos:
      xcode: "10.0.0" # 10.0.0 is macOS 10.13.6
    working_directory: ~/aeternity
    steps:
      - checkout
      - *restore_macos_package_cache
      - run:
          name: Install required tools
          # libsodium headers cannot be found without explicit brew link
          command: |
            brew update
            brew install libsodium erlang@20
            brew link libsodium
            brew link --force erlang@20
      - *save_macos_package_cache
      - *set_package_path
      - *test_arch_os_dependencies
      - *build_package
      - *test_package
      - store_artifacts:
          path: /tmp/package_tests/node1/log
      - store_artifacts:
          path: /tmp/package_tests/node2/log
      - store_artifacts:
          path: /tmp/package_tests/node3/log
      - *store_package_artifacts
      - persist_to_workspace:
          root: *packages_workspace
          paths:
            - "*.tar.gz"
      - *fail_notification

  uat_tests:
    executor: builder_container_stable
    <<: *container_config
    steps:
      - checkout
      - *restore_rebar_cache
      - *restore_build_cache
      - run:
          name: UAT Tests
          command: |
            epmd -daemon
            make python-env && make multi-build
            make python-uats
      - run:
          name: Prepare JUnit Report
          command: mv py/tests/nosetests.xml py/tests/junit.xml
      - store_test_results:
          path: py/tests
      - store_artifacts:
          path: _build/dev1/rel/aeternity/log
          destination: node1/
      - store_artifacts:
          path: _build/dev2/rel/aeternity/log
          destination: node2/
      - store_artifacts:
          path: _build/dev3/rel/aeternity/log
          destination: node3/
      - *fail_notification

  docker_smoke_tests:
    executor: buildpack
    steps:
      - checkout
      - *setup_remote_docker
      - docker_build_branch

  docker_test_push_branch:
    executor: buildpack
    steps:
      - checkout
      - *setup_remote_docker
      - docker_build_branch
      - run:
          name: Push Docker image to DockerHub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH/\//_}
      - *fail_notification

  docker_push_latest:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    steps:
      - checkout
      - *setup_remote_docker
      - docker_login
      - run:
          name: Build and push Docker image to DockerHub
          command: |
            docker pull ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?}
            docker tag ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?} ${DOCKERHUB_REPO:?}:latest
            docker push ${DOCKERHUB_REPO:?}:latest

  docker_push_tag:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    steps:
      - checkout
      - *setup_remote_docker
      - docker_login
      - run:
          name: Build and push Docker image to DockerHub
          command: |
            docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?} .
            docker push ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?}

  docker_system_tests:
    <<: *machine_config
    steps:
      - *print_system_test_host_info
      - checkout
      - *install_os_deps
      - *install_otp
      - *install_libsodium
      - *restore_machine_build_cache
      - *prepare_ubuntu_user
      - *install_system_test_deps
      - run:
          name: System Tests
          no_output_timeout: 2h
          command: |
            sudo -u ubuntu -E -H make system-test
      - *collect_system_test_host_logs
      - *fail_notification_system_test
      - *save_machine_build_cache
      - store_test_results:
          path: *system_test_logs
      - store_artifacts:
          path: *system_test_logs
      - store_artifacts:
          path: *system_test_host_logs

  docker_system_smoke_tests:
    <<: *machine_config
    steps:
      - *print_system_test_host_info
      - checkout
      - *install_os_deps
      - *install_otp
      - *install_libsodium
      - *restore_machine_build_cache
      # keep user preparation step after cache restore because of perms
      - *prepare_ubuntu_user
      - *install_system_smoke_test_deps
      - run:
          name: System Smoke Tests
          no_output_timeout: 1h
          command: |
            sudo -u ubuntu -E -H make smoke-test-run
      - *collect_system_test_host_logs
      - *fail_notification_system_test
      - *save_machine_build_cache
      - store_test_results:
          path: *system_test_logs
      - store_artifacts:
          path: *system_test_logs
      - store_artifacts:
          path: *system_test_host_logs

  deploy_integration:
    executor: infrastructure_container_unstable
    <<: *infrastructure_config
    environment:
      - DEPLOY_ENV: integration
      - DEPLOY_DOWNTIME: 900 #15M
    steps: *deploy_steps

  deploy_next:
    executor: infrastructure_container_unstable
    <<: *infrastructure_config
    environment:
      - DEPLOY_ENV: next
      - DEPLOY_DOWNTIME: 900 #15M
    steps: *deploy_steps

  deploy_dev1:
    executor: infrastructure_container_unstable
    <<: *infrastructure_config
    environment:
      - DEPLOY_ENV: dev1
    steps: *deploy_steps

  deploy_dev2:
    executor: infrastructure_container_unstable
    <<: *infrastructure_config
    environment:
      - DEPLOY_ENV: dev2
    steps: *deploy_steps

  deploy_uat_blue:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    environment:
      - DEPLOY_ENV: uat
      - DEPLOY_COLOR: blue
      - DEPLOY_DOWNTIME: 1800 #30M
    steps: *deploy_steps

  deploy_uat_green:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    environment:
      - DEPLOY_ENV: uat
      - DEPLOY_COLOR: green
      - DEPLOY_DOWNTIME: 1800 #30M
    steps: *deploy_steps

  upload_packages_osx:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    <<: *upload_package
    environment:
      <<: *infrastructure_config_environment
      PKG_TARGET_OS: macos

  upload_packages_linux:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    <<: *upload_package
    environment:
      <<: *infrastructure_config_environment
      PKG_TARGET_OS: ubuntu

  upload_latest_packages_osx:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    environment:
      <<: *infrastructure_config_environment
      PKG_TARGET_OS: macos
    steps: *upload_latest_artifacts

  upload_latest_packages_linux:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    environment:
      <<: *infrastructure_config_environment
      PKG_TARGET_OS: ubuntu
    steps: *upload_latest_artifacts

  verify_release_artifacts:
    executor: infrastructure_container_stable
    <<: *infrastructure_config
    steps:
      - run:
          name: Verify release artifacts
          command: |
            /infrastructure/scripts/check_release_artifacts.sh ${CIRCLE_TAG}

  build_uml_diagrams:
    docker:
      - image: circleci/openjdk:11-jdk-stretch
    steps:
      - checkout
      - run:
          name: Install PlantUML dependencies
          command: |
            sudo apt-get -qq -y update && sudo apt-get -qq -y install graphviz librsvg2-bin
      - run: make build-uml
      - store_artifacts:
          path: docs/state-channels
      - *fail_notification

  # Windows jobs
  windows_package:
    <<: *windows_container
    steps:
      - run: systeminfo
      - windows_install_deps:
          otp_install_path: << parameters.otp_install_path >>
          otp_version: << parameters.otp_version >>
          msys_install_path: << parameters.msys_install_path >>
      - run:
          name: Build packages
          command: .circleci\windows\build
      - run:
          name: Smoke test
          command: .circleci\windows\test
      - store_artifacts:
          path: *windows_artifacts
          destination: /tmp/packages-<< parameters.otp_version >>

# CircleCI skips a job for a tag by default.
# A job must have a filters tags section to run as a part of a tag push
# and all its transitively dependent jobs must also have a filters tags section.
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - windows_package:
          otp_version: "21.3"
          context: ae-node-builds
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - build:
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - build_otp21:
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - docker_smoke_tests:
          context: ae-node-builds
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
                - /releases\/.*/
                - *master_branch

      - docker_system_smoke_tests:
          requires: []
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - test_roma:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - test_minerva:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - test_fortuna:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - test_lima:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - test_lima_otp21:
          requires:
            - build_otp21
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - test_mnesia_leveled:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - test_mnesia_rocksdb:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - eunit_roma:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - eunit_minerva:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - eunit_fortuna:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - eunit_lima:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - aevm_tests:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - uat_tests:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - docker_system_tests:
          filters:
            branches:
              only: system-tests

      - static_analysis:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - static_analysis_otp21:
          requires:
            - build_otp21
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests

      - rebar_lock_check:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - linux_package:
          filters:
            branches:
              ignore:
                - system-tests
            tags:
              only: *tag_regex

      - ubuntu_package:
          filters:
            branches:
              only:
                - /releases\/.*/
                - *master_branch
            tags:
              only: *tag_regex

      - upload_build_artifacts:
          context: ae-node-builds
          requires:
            - linux_package
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

      - osx_package:
          filters:
            branches:
              only:
                - /releases\/.*/
                - *master_branch
            tags:
              only: *tag_regex

      - deploy_integration:
          context: ae-node-builds
          requires:
            - test_roma
            - test_minerva
            - test_fortuna
            - test_lima
            - test_mnesia_leveled
            - test_mnesia_rocksdb
            - eunit_roma
            - eunit_minerva
            - eunit_fortuna
            - eunit_lima
            - aevm_tests
            - uat_tests
            - static_analysis
            - rebar_lock_check
            - linux_package
            - build_uml_diagrams
          filters:
            branches:
              only: master

      - docker_test_push_branch:
          context: ae-node-builds
          requires:
            - test_roma
            - test_minerva
            - test_fortuna
            - test_lima
            - test_mnesia_leveled
            - test_mnesia_rocksdb
            - eunit_roma
            - eunit_minerva
            - eunit_fortuna
            - eunit_lima
            - aevm_tests
            - uat_tests
            - static_analysis
            - rebar_lock_check
          filters:
            branches:
              only:
                - *master_branch

      - deploy_next:
          context: ae-node-builds
          requires:
            - test_roma
            - test_minerva
            - test_fortuna
            - test_lima
            - test_mnesia_leveled
            - test_mnesia_rocksdb
            - eunit_roma
            - eunit_minerva
            - eunit_fortuna
            - eunit_lima
            - aevm_tests
            - uat_tests
            - static_analysis
            - rebar_lock_check
            - linux_package
            - linux_package
          filters:
            branches:
              only: *master_branch

      - deploy_dev1:
          context: ae-node-builds
          requires:
            - linux_package
          filters:
            branches:
              only: env/dev1

      - deploy_dev2:
          context: ae-node-builds
          requires:
            - linux_package
          filters:
            branches:
              only: env/dev2

      - hodl_artefact_upload:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - hodl_blue:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - hodl_green:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - deploy_uat_blue:
          context: ae-node-builds
          requires:
            - eunit_roma
            - eunit_minerva
            - eunit_fortuna
            - eunit_lima
            - static_analysis
            - rebar_lock_check
            - linux_package
            - hodl_blue
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - deploy_uat_green:
          context: ae-node-builds
          requires:
            - deploy_uat_blue
            - hodl_green
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - upload_packages_linux:
          context: ae-node-builds
          requires:
            - eunit_roma
            - eunit_minerva
            - eunit_fortuna
            - eunit_lima
            - static_analysis
            - rebar_lock_check
            - linux_package
            - hodl_artefact_upload
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - upload_packages_osx:
          context: ae-node-builds
          requires:
            - eunit_roma
            - eunit_minerva
            - eunit_fortuna
            - eunit_lima
            - static_analysis
            - rebar_lock_check
            - osx_package
            - hodl_artefact_upload
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - docker_push_tag:
          context: ae-node-builds
          requires:
            - eunit_roma
            - eunit_minerva
            - eunit_fortuna
            - eunit_lima
            - static_analysis
            - rebar_lock_check
            - hodl_artefact_upload
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - hodl_latest:
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - upload_latest_packages_linux:
          context: ae-node-builds
          requires:
            - linux_package
            - hodl_latest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - upload_latest_packages_osx:
          context: ae-node-builds
          requires:
            - osx_package
            - hodl_latest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - docker_push_latest:
          context: ae-node-builds
          requires:
            - hodl_latest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - verify_release_artifacts:
          context: ae-node-builds
          requires:
            - upload_build_artifacts
            - upload_packages_linux
            - upload_latest_packages_linux
            - upload_packages_osx
            - upload_latest_packages_osx
            - docker_push_tag
            - docker_push_latest
          filters:
            branches:
              ignore: /.*/
            tags:
              only: *tag_regex

      - build_uml_diagrams:
          requires:
            - build
          filters:
            branches:
              ignore:
                - env/dev1
                - env/dev2
                - system-tests
            tags:
              only: *tag_regex

  system_tests:
    triggers:
      - schedule:
          # run at midnight and noon UTC
          cron: "0 0,12 * * *"
          filters:
            branches:
              only:
                - *master_branch
    jobs:
      - docker_system_tests
