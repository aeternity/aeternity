# coding: utf-8

"""
    Aeternity Epoch

    This is the [Aeternity](https://www.aeternity.com/) Epoch API.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InternalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_account_balance(self, account_pubkey, **kwargs):  # noqa: E501
        """get_account_balance  # noqa: E501

        Get accounts's balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_balance(account_pubkey, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_pubkey: Account pubkey to show balance for (required)
        :param int height: Height of the block to show balance at
        :param str hash: Hash of the block to show balance at
        :return: Balance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_balance_with_http_info(account_pubkey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_balance_with_http_info(account_pubkey, **kwargs)  # noqa: E501
            return data

    def get_account_balance_with_http_info(self, account_pubkey, **kwargs):  # noqa: E501
        """get_account_balance  # noqa: E501

        Get accounts's balance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_balance_with_http_info(account_pubkey, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_pubkey: Account pubkey to show balance for (required)
        :param int height: Height of the block to show balance at
        :param str hash: Hash of the block to show balance at
        :return: Balance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_pubkey', 'height', 'hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_balance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_pubkey' is set
        if ('account_pubkey' not in params or
                params['account_pubkey'] is None):
            raise ValueError("Missing the required parameter `account_pubkey` when calling `get_account_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_pubkey' in params:
            path_params['account_pubkey'] = params['account_pubkey']  # noqa: E501

        query_params = []
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/balance/{account_pubkey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Balance',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_transactions(self, account_pubkey, **kwargs):  # noqa: E501
        """get_account_transactions  # noqa: E501

        Get accounts's transactions included in blocks in the longest chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_transactions(account_pubkey, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_pubkey: Account pubkey to show transactions for (required)
        :param int limit: Maximum transactions count to show
        :param int offset: Offset to start transaction list from
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :param str tx_encoding: Transactions encoding
        :return: TxObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_account_transactions_with_http_info(account_pubkey, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_transactions_with_http_info(account_pubkey, **kwargs)  # noqa: E501
            return data

    def get_account_transactions_with_http_info(self, account_pubkey, **kwargs):  # noqa: E501
        """get_account_transactions  # noqa: E501

        Get accounts's transactions included in blocks in the longest chain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_account_transactions_with_http_info(account_pubkey, async=True)
        >>> result = thread.get()

        :param async bool
        :param str account_pubkey: Account pubkey to show transactions for (required)
        :param int limit: Maximum transactions count to show
        :param int offset: Offset to start transaction list from
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :param str tx_encoding: Transactions encoding
        :return: TxObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_pubkey', 'limit', 'offset', 'tx_types', 'exclude_tx_types', 'tx_encoding']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_pubkey' is set
        if ('account_pubkey' not in params or
                params['account_pubkey'] is None):
            raise ValueError("Missing the required parameter `account_pubkey` when calling `get_account_transactions`")  # noqa: E501

        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_account_transactions`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_account_transactions`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_account_transactions`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'account_pubkey' in params:
            path_params['account_pubkey'] = params['account_pubkey']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'tx_types' in params:
            query_params.append(('tx_types', params['tx_types']))  # noqa: E501
        if 'exclude_tx_types' in params:
            query_params.append(('exclude_tx_types', params['exclude_tx_types']))  # noqa: E501
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/txs/{account_pubkey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TxObjects',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_active_registered_oracles(self, **kwargs):  # noqa: E501
        """get_active_registered_oracles  # noqa: E501

        Get active registered oracles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_active_registered_oracles(async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Last oracle in previous page
        :param int max: Max number of active oracles received
        :return: RegisteredOracles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_active_registered_oracles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_active_registered_oracles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_active_registered_oracles_with_http_info(self, **kwargs):  # noqa: E501
        """get_active_registered_oracles  # noqa: E501

        Get active registered oracles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_active_registered_oracles_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Last oracle in previous page
        :param int max: Max number of active oracles received
        :return: RegisteredOracles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'max']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_active_registered_oracles" % key
                )
            params[key] = val
        del params['kwargs']

        if 'max' in params and params['max'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `max` when calling `get_active_registered_oracles`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'max' in params and params['max'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max` when calling `get_active_registered_oracles`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oracles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegisteredOracles',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_by_hash_internal(self, hash, **kwargs):  # noqa: E501
        """get_block_by_hash_internal  # noqa: E501

        Get a block by hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_by_hash_internal(hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Hash of the block to fetch (required)
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_by_hash_internal_with_http_info(hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_by_hash_internal_with_http_info(hash, **kwargs)  # noqa: E501
            return data

    def get_block_by_hash_internal_with_http_info(self, hash, **kwargs):  # noqa: E501
        """get_block_by_hash_internal  # noqa: E501

        Get a block by hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_by_hash_internal_with_http_info(hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Hash of the block to fetch (required)
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash', 'tx_encoding']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_by_hash_internal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_block_by_hash_internal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/hash/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericBlock',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_by_height_internal(self, height, **kwargs):  # noqa: E501
        """get_block_by_height_internal  # noqa: E501

        Get a block by height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_by_height_internal(height, async=True)
        >>> result = thread.get()

        :param async bool
        :param int height: Height of the block to fetch (required)
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_by_height_internal_with_http_info(height, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_by_height_internal_with_http_info(height, **kwargs)  # noqa: E501
            return data

    def get_block_by_height_internal_with_http_info(self, height, **kwargs):  # noqa: E501
        """get_block_by_height_internal  # noqa: E501

        Get a block by height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_by_height_internal_with_http_info(height, async=True)
        >>> result = thread.get()

        :param async bool
        :param int height: Height of the block to fetch (required)
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height', 'tx_encoding']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_by_height_internal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `get_block_by_height_internal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501

        query_params = []
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/height/{height}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericBlock',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_genesis(self, **kwargs):  # noqa: E501
        """get_block_genesis  # noqa: E501

        Get the genesis block  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_genesis(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_genesis_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_block_genesis_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_block_genesis_with_http_info(self, **kwargs):  # noqa: E501
        """get_block_genesis  # noqa: E501

        Get the genesis block  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_genesis_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx_encoding']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_genesis" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/genesis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericBlock',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_latest(self, **kwargs):  # noqa: E501
        """get_block_latest  # noqa: E501

        Get the top block  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_latest(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_latest_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_block_latest_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_block_latest_with_http_info(self, **kwargs):  # noqa: E501
        """get_block_latest  # noqa: E501

        Get the top block  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_latest_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx_encoding']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_latest" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericBlock',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_number(self, **kwargs):  # noqa: E501
        """get_block_number  # noqa: E501

        Get the current block's height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_number(async=True)
        >>> result = thread.get()

        :param async bool
        :return: BlockHeight
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_number_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_block_number_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_block_number_with_http_info(self, **kwargs):  # noqa: E501
        """get_block_number  # noqa: E501

        Get the current block's height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_number_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: BlockHeight
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_number" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/number', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockHeight',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_pending(self, **kwargs):  # noqa: E501
        """get_block_pending  # noqa: E501

        Get the block being mined  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_pending(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_pending_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_block_pending_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_block_pending_with_http_info(self, **kwargs):  # noqa: E501
        """get_block_pending  # noqa: E501

        Get the block being mined  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_pending_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_encoding: Transactions encoding
        :return: GenericBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx_encoding']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_pending" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/pending', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenericBlock',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_txs_count_by_hash(self, hash, **kwargs):  # noqa: E501
        """get_block_txs_count_by_hash  # noqa: E501

        Get a block transactions count by hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_txs_count_by_hash(hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Hash of the block to fetch (required)
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_txs_count_by_hash_with_http_info(hash, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_txs_count_by_hash_with_http_info(hash, **kwargs)  # noqa: E501
            return data

    def get_block_txs_count_by_hash_with_http_info(self, hash, **kwargs):  # noqa: E501
        """get_block_txs_count_by_hash  # noqa: E501

        Get a block transactions count by hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_txs_count_by_hash_with_http_info(hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Hash of the block to fetch (required)
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash', 'tx_types', 'exclude_tx_types']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_txs_count_by_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_block_txs_count_by_hash`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []
        if 'tx_types' in params:
            query_params.append(('tx_types', params['tx_types']))  # noqa: E501
        if 'exclude_tx_types' in params:
            query_params.append(('exclude_tx_types', params['exclude_tx_types']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/txs/count/hash/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_txs_count_by_height(self, height, **kwargs):  # noqa: E501
        """get_block_txs_count_by_height  # noqa: E501

        Get a block transactions count by height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_txs_count_by_height(height, async=True)
        >>> result = thread.get()

        :param async bool
        :param int height: Height of the block to fetch (required)
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_block_txs_count_by_height_with_http_info(height, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_txs_count_by_height_with_http_info(height, **kwargs)  # noqa: E501
            return data

    def get_block_txs_count_by_height_with_http_info(self, height, **kwargs):  # noqa: E501
        """get_block_txs_count_by_height  # noqa: E501

        Get a block transactions count by height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_block_txs_count_by_height_with_http_info(height, async=True)
        >>> result = thread.get()

        :param async bool
        :param int height: Height of the block to fetch (required)
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height', 'tx_types', 'exclude_tx_types']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_txs_count_by_height" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `get_block_txs_count_by_height`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501

        query_params = []
        if 'tx_types' in params:
            query_params.append(('tx_types', params['tx_types']))  # noqa: E501
        if 'exclude_tx_types' in params:
            query_params.append(('exclude_tx_types', params['exclude_tx_types']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/txs/count/height/{height}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_genesis_block_txs_count(self, **kwargs):  # noqa: E501
        """get_genesis_block_txs_count  # noqa: E501

        Get the genesis block transactions count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_genesis_block_txs_count(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_genesis_block_txs_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_genesis_block_txs_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_genesis_block_txs_count_with_http_info(self, **kwargs):  # noqa: E501
        """get_genesis_block_txs_count  # noqa: E501

        Get the genesis block transactions count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_genesis_block_txs_count_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx_types', 'exclude_tx_types']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_genesis_block_txs_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tx_types' in params:
            query_params.append(('tx_types', params['tx_types']))  # noqa: E501
        if 'exclude_tx_types' in params:
            query_params.append(('exclude_tx_types', params['exclude_tx_types']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/txs/count/genesis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_latest_block_txs_count(self, **kwargs):  # noqa: E501
        """get_latest_block_txs_count  # noqa: E501

        Get the latest block transactions count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_latest_block_txs_count(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_latest_block_txs_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_latest_block_txs_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_latest_block_txs_count_with_http_info(self, **kwargs):  # noqa: E501
        """get_latest_block_txs_count  # noqa: E501

        Get the latest block transactions count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_latest_block_txs_count_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx_types', 'exclude_tx_types']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_block_txs_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tx_types' in params:
            query_params.append(('tx_types', params['tx_types']))  # noqa: E501
        if 'exclude_tx_types' in params:
            query_params.append(('exclude_tx_types', params['exclude_tx_types']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/txs/count/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_oracle_questions(self, oracle_pub_key, **kwargs):  # noqa: E501
        """get_oracle_questions  # noqa: E501

        Get active oracle questions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_oracle_questions(oracle_pub_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str oracle_pub_key: Oracle public key (required)
        :param str _from: Last query id in previous page
        :param int max: Max number of oracle queries received
        :return: OracleQuestions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_oracle_questions_with_http_info(oracle_pub_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_oracle_questions_with_http_info(oracle_pub_key, **kwargs)  # noqa: E501
            return data

    def get_oracle_questions_with_http_info(self, oracle_pub_key, **kwargs):  # noqa: E501
        """get_oracle_questions  # noqa: E501

        Get active oracle questions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_oracle_questions_with_http_info(oracle_pub_key, async=True)
        >>> result = thread.get()

        :param async bool
        :param str oracle_pub_key: Oracle public key (required)
        :param str _from: Last query id in previous page
        :param int max: Max number of oracle queries received
        :return: OracleQuestions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['oracle_pub_key', '_from', 'max']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_oracle_questions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'oracle_pub_key' is set
        if ('oracle_pub_key' not in params or
                params['oracle_pub_key'] is None):
            raise ValueError("Missing the required parameter `oracle_pub_key` when calling `get_oracle_questions`")  # noqa: E501

        if 'max' in params and params['max'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `max` when calling `get_oracle_questions`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'max' in params and params['max'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max` when calling `get_oracle_questions`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'oracle_pub_key' in params:
            query_params.append(('oracle_pub_key', params['oracle_pub_key']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oracle-questions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OracleQuestions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_peers(self, **kwargs):  # noqa: E501
        """get_peers  # noqa: E501

        Get node Peers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_peers(async=True)
        >>> result = thread.get()

        :param async bool
        :return: Peers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_peers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_peers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_peers_with_http_info(self, **kwargs):  # noqa: E501
        """get_peers  # noqa: E501

        Get node Peers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_peers_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: Peers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_peers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/debug/peers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Peers',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pending_block_txs_count(self, **kwargs):  # noqa: E501
        """get_pending_block_txs_count  # noqa: E501

        Get the pending block transactions count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pending_block_txs_count(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_pending_block_txs_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pending_block_txs_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pending_block_txs_count_with_http_info(self, **kwargs):  # noqa: E501
        """get_pending_block_txs_count  # noqa: E501

        Get the pending block transactions count  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pending_block_txs_count_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx_types', 'exclude_tx_types']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pending_block_txs_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tx_types' in params:
            query_params.append(('tx_types', params['tx_types']))  # noqa: E501
        if 'exclude_tx_types' in params:
            query_params.append(('exclude_tx_types', params['exclude_tx_types']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/txs/count/pending', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pub_key(self, **kwargs):  # noqa: E501
        """get_pub_key  # noqa: E501

        Get user's public key address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pub_key(async=True)
        >>> result = thread.get()

        :param async bool
        :return: PubKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_pub_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_pub_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_pub_key_with_http_info(self, **kwargs):  # noqa: E501
        """get_pub_key  # noqa: E501

        Get user's public key address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_pub_key_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: PubKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pub_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/account/pub-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PubKey',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_from_block_hash(self, hash, tx_index, **kwargs):  # noqa: E501
        """get_transaction_from_block_hash  # noqa: E501

        Get a transaction by index in the block by hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_from_block_hash(hash, tx_index, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Hash of the block to search for (required)
        :param int tx_index: Index of the transaction in the block (required)
        :param str tx_encoding: Transactions encoding
        :return: SingleTxObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_transaction_from_block_hash_with_http_info(hash, tx_index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_from_block_hash_with_http_info(hash, tx_index, **kwargs)  # noqa: E501
            return data

    def get_transaction_from_block_hash_with_http_info(self, hash, tx_index, **kwargs):  # noqa: E501
        """get_transaction_from_block_hash  # noqa: E501

        Get a transaction by index in the block by hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_from_block_hash_with_http_info(hash, tx_index, async=True)
        >>> result = thread.get()

        :param async bool
        :param str hash: Hash of the block to search for (required)
        :param int tx_index: Index of the transaction in the block (required)
        :param str tx_encoding: Transactions encoding
        :return: SingleTxObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash', 'tx_index', 'tx_encoding']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_from_block_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `get_transaction_from_block_hash`")  # noqa: E501
        # verify the required parameter 'tx_index' is set
        if ('tx_index' not in params or
                params['tx_index'] is None):
            raise ValueError("Missing the required parameter `tx_index` when calling `get_transaction_from_block_hash`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501
        if 'tx_index' in params:
            path_params['tx_index'] = params['tx_index']  # noqa: E501

        query_params = []
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/tx/hash/{hash}/{tx_index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleTxObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_from_block_height(self, height, tx_index, **kwargs):  # noqa: E501
        """get_transaction_from_block_height  # noqa: E501

        Get a transaction by index in the block by height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_from_block_height(height, tx_index, async=True)
        >>> result = thread.get()

        :param async bool
        :param int height: Height of the block to search for (required)
        :param int tx_index: Index of the transaction in the block (required)
        :param str tx_encoding: Transactions encoding
        :return: SingleTxObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_transaction_from_block_height_with_http_info(height, tx_index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_from_block_height_with_http_info(height, tx_index, **kwargs)  # noqa: E501
            return data

    def get_transaction_from_block_height_with_http_info(self, height, tx_index, **kwargs):  # noqa: E501
        """get_transaction_from_block_height  # noqa: E501

        Get a transaction by index in the block by height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_from_block_height_with_http_info(height, tx_index, async=True)
        >>> result = thread.get()

        :param async bool
        :param int height: Height of the block to search for (required)
        :param int tx_index: Index of the transaction in the block (required)
        :param str tx_encoding: Transactions encoding
        :return: SingleTxObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height', 'tx_index', 'tx_encoding']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_from_block_height" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `get_transaction_from_block_height`")  # noqa: E501
        # verify the required parameter 'tx_index' is set
        if ('tx_index' not in params or
                params['tx_index'] is None):
            raise ValueError("Missing the required parameter `tx_index` when calling `get_transaction_from_block_height`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501
        if 'tx_index' in params:
            path_params['tx_index'] = params['tx_index']  # noqa: E501

        query_params = []
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/tx/height/{height}/{tx_index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleTxObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_from_block_latest(self, tx_index, **kwargs):  # noqa: E501
        """get_transaction_from_block_latest  # noqa: E501

        Get a transaction by index in the latest block  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_from_block_latest(tx_index, async=True)
        >>> result = thread.get()

        :param async bool
        :param int tx_index: Index of the transaction in the block (required)
        :param str tx_encoding: Transactions encoding
        :return: SingleTxObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_transaction_from_block_latest_with_http_info(tx_index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_from_block_latest_with_http_info(tx_index, **kwargs)  # noqa: E501
            return data

    def get_transaction_from_block_latest_with_http_info(self, tx_index, **kwargs):  # noqa: E501
        """get_transaction_from_block_latest  # noqa: E501

        Get a transaction by index in the latest block  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_from_block_latest_with_http_info(tx_index, async=True)
        >>> result = thread.get()

        :param async bool
        :param int tx_index: Index of the transaction in the block (required)
        :param str tx_encoding: Transactions encoding
        :return: SingleTxObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx_index', 'tx_encoding']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_from_block_latest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tx_index' is set
        if ('tx_index' not in params or
                params['tx_index'] is None):
            raise ValueError("Missing the required parameter `tx_index` when calling `get_transaction_from_block_latest`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tx_index' in params:
            path_params['tx_index'] = params['tx_index']  # noqa: E501

        query_params = []
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/tx/latest/{tx_index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleTxObject',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_txs_list_from_block_range_by_hash(self, _from, to, **kwargs):  # noqa: E501
        """get_txs_list_from_block_range_by_hash  # noqa: E501

        Get transactions list from a block range by hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_txs_list_from_block_range_by_hash(_from, to, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Hash of the block to start the range (required)
        :param str to: Hash of the block to end the range (required)
        :param str tx_encoding: Transactions encoding
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: TxObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_txs_list_from_block_range_by_hash_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_txs_list_from_block_range_by_hash_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def get_txs_list_from_block_range_by_hash_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """get_txs_list_from_block_range_by_hash  # noqa: E501

        Get transactions list from a block range by hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_txs_list_from_block_range_by_hash_with_http_info(_from, to, async=True)
        >>> result = thread.get()

        :param async bool
        :param str _from: Hash of the block to start the range (required)
        :param str to: Hash of the block to end the range (required)
        :param str tx_encoding: Transactions encoding
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: TxObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'tx_encoding', 'tx_types', 'exclude_tx_types']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_txs_list_from_block_range_by_hash" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_txs_list_from_block_range_by_hash`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_txs_list_from_block_range_by_hash`")  # noqa: E501

        if '_from' in params and params['_from'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `_from` when calling `get_txs_list_from_block_range_by_hash`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'to' in params and params['to'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `to` when calling `get_txs_list_from_block_range_by_hash`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501
        if 'tx_types' in params:
            query_params.append(('tx_types', params['tx_types']))  # noqa: E501
        if 'exclude_tx_types' in params:
            query_params.append(('exclude_tx_types', params['exclude_tx_types']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/txs/list/hash', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TxObjects',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_txs_list_from_block_range_by_height(self, _from, to, **kwargs):  # noqa: E501
        """get_txs_list_from_block_range_by_height  # noqa: E501

        Get transactions list from a block range by height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_txs_list_from_block_range_by_height(_from, to, async=True)
        >>> result = thread.get()

        :param async bool
        :param int _from: Height of the block to start the range (required)
        :param int to: Height of the block to end the range (required)
        :param str tx_encoding: Transactions encoding
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: TxObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_txs_list_from_block_range_by_height_with_http_info(_from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.get_txs_list_from_block_range_by_height_with_http_info(_from, to, **kwargs)  # noqa: E501
            return data

    def get_txs_list_from_block_range_by_height_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """get_txs_list_from_block_range_by_height  # noqa: E501

        Get transactions list from a block range by height  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_txs_list_from_block_range_by_height_with_http_info(_from, to, async=True)
        >>> result = thread.get()

        :param async bool
        :param int _from: Height of the block to start the range (required)
        :param int to: Height of the block to end the range (required)
        :param str tx_encoding: Transactions encoding
        :param str tx_types: Transactions types to show. Comma separated
        :param str exclude_tx_types: Transactions types not to show. Comma separated. If a tx type appears in both tx_types and exclude_tx_types, it is excluded.
        :return: TxObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'tx_encoding', 'tx_types', 'exclude_tx_types']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_txs_list_from_block_range_by_height" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `get_txs_list_from_block_range_by_height`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `get_txs_list_from_block_range_by_height`")  # noqa: E501

        if '_from' in params and params['_from'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `_from` when calling `get_txs_list_from_block_range_by_height`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'to' in params and params['to'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `to` when calling `get_txs_list_from_block_range_by_height`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'tx_encoding' in params:
            query_params.append(('tx_encoding', params['tx_encoding']))  # noqa: E501
        if 'tx_types' in params:
            query_params.append(('tx_types', params['tx_types']))  # noqa: E501
        if 'exclude_tx_types' in params:
            query_params.append(('exclude_tx_types', params['exclude_tx_types']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/block/txs/list/height', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TxObjects',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_name_claim_tx(self, body, **kwargs):  # noqa: E501
        """post_name_claim_tx  # noqa: E501

        Create name claim transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_claim_tx(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NameClaimTx body: Creates new name claim transaction (required)
        :return: NameHash
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_name_claim_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_name_claim_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_name_claim_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_name_claim_tx  # noqa: E501

        Create name claim transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_claim_tx_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NameClaimTx body: Creates new name claim transaction (required)
        :return: NameHash
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_name_claim_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_name_claim_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/name-claim-tx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameHash',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_name_preclaim_tx(self, body, **kwargs):  # noqa: E501
        """post_name_preclaim_tx  # noqa: E501

        Create name preclaim transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_preclaim_tx(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NamePreclaimTx body: Creates new name preclaim transaction (required)
        :return: NameCommitmentHash
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_name_preclaim_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_name_preclaim_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_name_preclaim_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_name_preclaim_tx  # noqa: E501

        Create name preclaim transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_preclaim_tx_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NamePreclaimTx body: Creates new name preclaim transaction (required)
        :return: NameCommitmentHash
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_name_preclaim_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_name_preclaim_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/name-preclaim-tx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameCommitmentHash',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_name_revoke_tx(self, body, **kwargs):  # noqa: E501
        """post_name_revoke_tx  # noqa: E501

        Create name revoke transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_revoke_tx(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NameRevokeTx body: Creates new name revoke transaction (required)
        :return: NameHash
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_name_revoke_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_name_revoke_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_name_revoke_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_name_revoke_tx  # noqa: E501

        Create name revoke transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_revoke_tx_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NameRevokeTx body: Creates new name revoke transaction (required)
        :return: NameHash
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_name_revoke_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_name_revoke_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/name-revoke-tx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameHash',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_name_transfer_tx(self, body, **kwargs):  # noqa: E501
        """post_name_transfer_tx  # noqa: E501

        Create name transfer transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_transfer_tx(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NameTransferTx body: Creates new name transfer transaction (required)
        :return: NameHash
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_name_transfer_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_name_transfer_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_name_transfer_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_name_transfer_tx  # noqa: E501

        Create name transfer transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_transfer_tx_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NameTransferTx body: Creates new name transfer transaction (required)
        :return: NameHash
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_name_transfer_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_name_transfer_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/name-transfer-tx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameHash',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_name_update_tx(self, body, **kwargs):  # noqa: E501
        """post_name_update_tx  # noqa: E501

        Create name update transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_update_tx(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NameUpdateTx body: Creates new name update transaction (required)
        :return: NameHash
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_name_update_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_name_update_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_name_update_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_name_update_tx  # noqa: E501

        Create name update transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_name_update_tx_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param NameUpdateTx body: Creates new name update transaction (required)
        :return: NameHash
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_name_update_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_name_update_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/name-update-tx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NameHash',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_oracle_query_tx(self, body, **kwargs):  # noqa: E501
        """post_oracle_query_tx  # noqa: E501

        Create oracle query transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_oracle_query_tx(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param OracleQueryTx body: Creates new oracle query transaction (required)
        :return: OracleQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_oracle_query_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_oracle_query_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_oracle_query_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_oracle_query_tx  # noqa: E501

        Create oracle query transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_oracle_query_tx_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param OracleQueryTx body: Creates new oracle query transaction (required)
        :return: OracleQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_oracle_query_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_oracle_query_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oracle-query-tx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OracleQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_oracle_register_tx(self, body, **kwargs):  # noqa: E501
        """post_oracle_register_tx  # noqa: E501

        Create oracle register transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_oracle_register_tx(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param OracleRegisterTx body: Creates new oracle register transaction (required)
        :return: OracleRegisterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_oracle_register_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_oracle_register_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_oracle_register_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_oracle_register_tx  # noqa: E501

        Create oracle register transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_oracle_register_tx_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param OracleRegisterTx body: Creates new oracle register transaction (required)
        :return: OracleRegisterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_oracle_register_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_oracle_register_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oracle-register-tx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OracleRegisterResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_oracle_response_tx(self, body, **kwargs):  # noqa: E501
        """post_oracle_response_tx  # noqa: E501

        Create oracle response transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_oracle_response_tx(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param OracleResponseTx body: Creates new oracle response transaction (required)
        :return: OracleQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_oracle_response_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_oracle_response_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_oracle_response_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_oracle_response_tx  # noqa: E501

        Create oracle response transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_oracle_response_tx_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param OracleResponseTx body: Creates new oracle response transaction (required)
        :return: OracleQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_oracle_response_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_oracle_response_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oracle-response-tx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OracleQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_spend_tx(self, body, **kwargs):  # noqa: E501
        """post_spend_tx  # noqa: E501

        Create spend transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_spend_tx(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SpendTx body: Creates new spend transaction (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_spend_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_spend_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_spend_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """post_spend_tx  # noqa: E501

        Create spend transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_spend_tx_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SpendTx body: Creates new spend transaction (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_spend_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_spend_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/spend-tx', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
