# coding: utf-8

"""
    Aeternity Epoch

    This is the [Aeternity](https://www.aeternity.com/) Epoch API.  # noqa: E501

    OpenAPI spec version: 0.8.0
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.uri import Uri  # noqa: F401,E501


class Ping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'genesis_hash': 'str',
        'best_hash': 'str',
        'difficulty': 'float',
        'share': 'int',
        'peers': 'list[Uri]'
    }

    attribute_map = {
        'source': 'source',
        'genesis_hash': 'genesis_hash',
        'best_hash': 'best_hash',
        'difficulty': 'difficulty',
        'share': 'share',
        'peers': 'peers'
    }

    def __init__(self, source=None, genesis_hash=None, best_hash=None, difficulty=None, share=None, peers=None):  # noqa: E501
        """Ping - a model defined in Swagger"""  # noqa: E501

        self._source = None
        self._genesis_hash = None
        self._best_hash = None
        self._difficulty = None
        self._share = None
        self._peers = None
        self.discriminator = None

        self.source = source
        self.genesis_hash = genesis_hash
        self.best_hash = best_hash
        self.difficulty = difficulty
        self.share = share
        if peers is not None:
            self.peers = peers

    @property
    def source(self):
        """Gets the source of this Ping.  # noqa: E501


        :return: The source of this Ping.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Ping.


        :param source: The source of this Ping.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def genesis_hash(self):
        """Gets the genesis_hash of this Ping.  # noqa: E501


        :return: The genesis_hash of this Ping.  # noqa: E501
        :rtype: str
        """
        return self._genesis_hash

    @genesis_hash.setter
    def genesis_hash(self, genesis_hash):
        """Sets the genesis_hash of this Ping.


        :param genesis_hash: The genesis_hash of this Ping.  # noqa: E501
        :type: str
        """
        if genesis_hash is None:
            raise ValueError("Invalid value for `genesis_hash`, must not be `None`")  # noqa: E501

        self._genesis_hash = genesis_hash

    @property
    def best_hash(self):
        """Gets the best_hash of this Ping.  # noqa: E501


        :return: The best_hash of this Ping.  # noqa: E501
        :rtype: str
        """
        return self._best_hash

    @best_hash.setter
    def best_hash(self, best_hash):
        """Sets the best_hash of this Ping.


        :param best_hash: The best_hash of this Ping.  # noqa: E501
        :type: str
        """
        if best_hash is None:
            raise ValueError("Invalid value for `best_hash`, must not be `None`")  # noqa: E501

        self._best_hash = best_hash

    @property
    def difficulty(self):
        """Gets the difficulty of this Ping.  # noqa: E501


        :return: The difficulty of this Ping.  # noqa: E501
        :rtype: float
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this Ping.


        :param difficulty: The difficulty of this Ping.  # noqa: E501
        :type: float
        """
        if difficulty is None:
            raise ValueError("Invalid value for `difficulty`, must not be `None`")  # noqa: E501

        self._difficulty = difficulty

    @property
    def share(self):
        """Gets the share of this Ping.  # noqa: E501


        :return: The share of this Ping.  # noqa: E501
        :rtype: int
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this Ping.


        :param share: The share of this Ping.  # noqa: E501
        :type: int
        """
        if share is None:
            raise ValueError("Invalid value for `share`, must not be `None`")  # noqa: E501
        if share is not None and share > 32:  # noqa: E501
            raise ValueError("Invalid value for `share`, must be a value less than or equal to `32`")  # noqa: E501

        self._share = share

    @property
    def peers(self):
        """Gets the peers of this Ping.  # noqa: E501


        :return: The peers of this Ping.  # noqa: E501
        :rtype: list[Uri]
        """
        return self._peers

    @peers.setter
    def peers(self, peers):
        """Sets the peers of this Ping.


        :param peers: The peers of this Ping.  # noqa: E501
        :type: list[Uri]
        """

        self._peers = peers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
