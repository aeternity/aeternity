# coding: utf-8

"""
    Aeternity Epoch

    This is the [Aeternity](https://www.aeternity.com/) Epoch API.

    OpenAPI spec version: 1.0.0
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source': 'str',
        'genesis_hash': 'str',
        'best_hash': 'str',
        'difficulty': 'float',
        'share': 'int',
        'peers': 'list[str]'
    }

    attribute_map = {
        'source': 'source',
        'genesis_hash': 'genesis_hash',
        'best_hash': 'best_hash',
        'difficulty': 'difficulty',
        'share': 'share',
        'peers': 'peers'
    }

    def __init__(self, source=None, genesis_hash=None, best_hash=None, difficulty=None, share=None, peers=None):
        """
        Ping - a model defined in Swagger
        """

        self._source = None
        self._genesis_hash = None
        self._best_hash = None
        self._difficulty = None
        self._share = None
        self._peers = None

        if source is not None:
          self.source = source
        if genesis_hash is not None:
          self.genesis_hash = genesis_hash
        if best_hash is not None:
          self.best_hash = best_hash
        if difficulty is not None:
          self.difficulty = difficulty
        if share is not None:
          self.share = share
        if peers is not None:
          self.peers = peers

    @property
    def source(self):
        """
        Gets the source of this Ping.

        :return: The source of this Ping.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Ping.

        :param source: The source of this Ping.
        :type: str
        """

        self._source = source

    @property
    def genesis_hash(self):
        """
        Gets the genesis_hash of this Ping.

        :return: The genesis_hash of this Ping.
        :rtype: str
        """
        return self._genesis_hash

    @genesis_hash.setter
    def genesis_hash(self, genesis_hash):
        """
        Sets the genesis_hash of this Ping.

        :param genesis_hash: The genesis_hash of this Ping.
        :type: str
        """

        self._genesis_hash = genesis_hash

    @property
    def best_hash(self):
        """
        Gets the best_hash of this Ping.

        :return: The best_hash of this Ping.
        :rtype: str
        """
        return self._best_hash

    @best_hash.setter
    def best_hash(self, best_hash):
        """
        Sets the best_hash of this Ping.

        :param best_hash: The best_hash of this Ping.
        :type: str
        """

        self._best_hash = best_hash

    @property
    def difficulty(self):
        """
        Gets the difficulty of this Ping.

        :return: The difficulty of this Ping.
        :rtype: float
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """
        Sets the difficulty of this Ping.

        :param difficulty: The difficulty of this Ping.
        :type: float
        """

        self._difficulty = difficulty

    @property
    def share(self):
        """
        Gets the share of this Ping.

        :return: The share of this Ping.
        :rtype: int
        """
        return self._share

    @share.setter
    def share(self, share):
        """
        Sets the share of this Ping.

        :param share: The share of this Ping.
        :type: int
        """

        self._share = share

    @property
    def peers(self):
        """
        Gets the peers of this Ping.

        :return: The peers of this Ping.
        :rtype: list[str]
        """
        return self._peers

    @peers.setter
    def peers(self, peers):
        """
        Sets the peers of this Ping.

        :param peers: The peers of this Ping.
        :type: list[str]
        """

        self._peers = peers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
