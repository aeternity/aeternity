# coding: utf-8

"""
    Aeternity Epoch

    This is the [Aeternity](https://www.aeternity.com/) Epoch API.

    OpenAPI spec version: 1.0.0
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OracleQueryTx(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'oracle_pubkey': 'str',
        'query': 'str',
        'query_fee': 'int',
        'query_ttl': 'TTL',
        'response_ttl': 'RelativeTTL',
        'fee': 'int'
    }

    attribute_map = {
        'oracle_pubkey': 'oracle_pubkey',
        'query': 'query',
        'query_fee': 'query_fee',
        'query_ttl': 'query_ttl',
        'response_ttl': 'response_ttl',
        'fee': 'fee'
    }

    def __init__(self, oracle_pubkey=None, query=None, query_fee=None, query_ttl=None, response_ttl=None, fee=None):
        """
        OracleQueryTx - a model defined in Swagger
        """

        self._oracle_pubkey = None
        self._query = None
        self._query_fee = None
        self._query_ttl = None
        self._response_ttl = None
        self._fee = None

        if oracle_pubkey is not None:
          self.oracle_pubkey = oracle_pubkey
        if query is not None:
          self.query = query
        if query_fee is not None:
          self.query_fee = query_fee
        if query_ttl is not None:
          self.query_ttl = query_ttl
        if response_ttl is not None:
          self.response_ttl = response_ttl
        if fee is not None:
          self.fee = fee

    @property
    def oracle_pubkey(self):
        """
        Gets the oracle_pubkey of this OracleQueryTx.

        :return: The oracle_pubkey of this OracleQueryTx.
        :rtype: str
        """
        return self._oracle_pubkey

    @oracle_pubkey.setter
    def oracle_pubkey(self, oracle_pubkey):
        """
        Sets the oracle_pubkey of this OracleQueryTx.

        :param oracle_pubkey: The oracle_pubkey of this OracleQueryTx.
        :type: str
        """

        self._oracle_pubkey = oracle_pubkey

    @property
    def query(self):
        """
        Gets the query of this OracleQueryTx.

        :return: The query of this OracleQueryTx.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this OracleQueryTx.

        :param query: The query of this OracleQueryTx.
        :type: str
        """

        self._query = query

    @property
    def query_fee(self):
        """
        Gets the query_fee of this OracleQueryTx.

        :return: The query_fee of this OracleQueryTx.
        :rtype: int
        """
        return self._query_fee

    @query_fee.setter
    def query_fee(self, query_fee):
        """
        Sets the query_fee of this OracleQueryTx.

        :param query_fee: The query_fee of this OracleQueryTx.
        :type: int
        """

        self._query_fee = query_fee

    @property
    def query_ttl(self):
        """
        Gets the query_ttl of this OracleQueryTx.

        :return: The query_ttl of this OracleQueryTx.
        :rtype: TTL
        """
        return self._query_ttl

    @query_ttl.setter
    def query_ttl(self, query_ttl):
        """
        Sets the query_ttl of this OracleQueryTx.

        :param query_ttl: The query_ttl of this OracleQueryTx.
        :type: TTL
        """

        self._query_ttl = query_ttl

    @property
    def response_ttl(self):
        """
        Gets the response_ttl of this OracleQueryTx.

        :return: The response_ttl of this OracleQueryTx.
        :rtype: RelativeTTL
        """
        return self._response_ttl

    @response_ttl.setter
    def response_ttl(self, response_ttl):
        """
        Sets the response_ttl of this OracleQueryTx.

        :param response_ttl: The response_ttl of this OracleQueryTx.
        :type: RelativeTTL
        """

        self._response_ttl = response_ttl

    @property
    def fee(self):
        """
        Gets the fee of this OracleQueryTx.

        :return: The fee of this OracleQueryTx.
        :rtype: int
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """
        Sets the fee of this OracleQueryTx.

        :param fee: The fee of this OracleQueryTx.
        :type: int
        """

        self._fee = fee

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OracleQueryTx):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
