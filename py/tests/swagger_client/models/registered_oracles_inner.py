# coding: utf-8

"""
    Aeternity Epoch

    This is the [Aeternity](https://www.aeternity.com/) Epoch API.

    OpenAPI spec version: 1.0.0
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RegisteredOraclesInner(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'query_format': 'str',
        'response_format': 'str',
        'query_fee': 'str',
        'expires_at': 'int'
    }

    attribute_map = {
        'address': 'address',
        'query_format': 'query_format',
        'response_format': 'response_format',
        'query_fee': 'query_fee',
        'expires_at': 'expires_at'
    }

    def __init__(self, address=None, query_format=None, response_format=None, query_fee=None, expires_at=None):
        """
        RegisteredOraclesInner - a model defined in Swagger
        """

        self._address = None
        self._query_format = None
        self._response_format = None
        self._query_fee = None
        self._expires_at = None

        if address is not None:
          self.address = address
        if query_format is not None:
          self.query_format = query_format
        if response_format is not None:
          self.response_format = response_format
        if query_fee is not None:
          self.query_fee = query_fee
        if expires_at is not None:
          self.expires_at = expires_at

    @property
    def address(self):
        """
        Gets the address of this RegisteredOraclesInner.

        :return: The address of this RegisteredOraclesInner.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this RegisteredOraclesInner.

        :param address: The address of this RegisteredOraclesInner.
        :type: str
        """

        self._address = address

    @property
    def query_format(self):
        """
        Gets the query_format of this RegisteredOraclesInner.

        :return: The query_format of this RegisteredOraclesInner.
        :rtype: str
        """
        return self._query_format

    @query_format.setter
    def query_format(self, query_format):
        """
        Sets the query_format of this RegisteredOraclesInner.

        :param query_format: The query_format of this RegisteredOraclesInner.
        :type: str
        """

        self._query_format = query_format

    @property
    def response_format(self):
        """
        Gets the response_format of this RegisteredOraclesInner.

        :return: The response_format of this RegisteredOraclesInner.
        :rtype: str
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format):
        """
        Sets the response_format of this RegisteredOraclesInner.

        :param response_format: The response_format of this RegisteredOraclesInner.
        :type: str
        """

        self._response_format = response_format

    @property
    def query_fee(self):
        """
        Gets the query_fee of this RegisteredOraclesInner.

        :return: The query_fee of this RegisteredOraclesInner.
        :rtype: str
        """
        return self._query_fee

    @query_fee.setter
    def query_fee(self, query_fee):
        """
        Sets the query_fee of this RegisteredOraclesInner.

        :param query_fee: The query_fee of this RegisteredOraclesInner.
        :type: str
        """

        self._query_fee = query_fee

    @property
    def expires_at(self):
        """
        Gets the expires_at of this RegisteredOraclesInner.

        :return: The expires_at of this RegisteredOraclesInner.
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this RegisteredOraclesInner.

        :param expires_at: The expires_at of this RegisteredOraclesInner.
        :type: int
        """

        self._expires_at = expires_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RegisteredOraclesInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
