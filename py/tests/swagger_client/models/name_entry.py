# coding: utf-8

"""
    Aeternity Epoch

    This is the [Aeternity](https://www.aeternity.com/) Epoch API.  # noqa: E501

    OpenAPI spec version: 0.6.0
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NameEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'name_hash': 'str',
        'name_ttl': 'int',
        'pointers': 'str'
    }

    attribute_map = {
        'name': 'name',
        'name_hash': 'name_hash',
        'name_ttl': 'name_ttl',
        'pointers': 'pointers'
    }

    def __init__(self, name=None, name_hash=None, name_ttl=None, pointers=None):  # noqa: E501
        """NameEntry - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._name_hash = None
        self._name_ttl = None
        self._pointers = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if name_hash is not None:
            self.name_hash = name_hash
        if name_ttl is not None:
            self.name_ttl = name_ttl
        if pointers is not None:
            self.pointers = pointers

    @property
    def name(self):
        """Gets the name of this NameEntry.  # noqa: E501


        :return: The name of this NameEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NameEntry.


        :param name: The name of this NameEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_hash(self):
        """Gets the name_hash of this NameEntry.  # noqa: E501


        :return: The name_hash of this NameEntry.  # noqa: E501
        :rtype: str
        """
        return self._name_hash

    @name_hash.setter
    def name_hash(self, name_hash):
        """Sets the name_hash of this NameEntry.


        :param name_hash: The name_hash of this NameEntry.  # noqa: E501
        :type: str
        """

        self._name_hash = name_hash

    @property
    def name_ttl(self):
        """Gets the name_ttl of this NameEntry.  # noqa: E501


        :return: The name_ttl of this NameEntry.  # noqa: E501
        :rtype: int
        """
        return self._name_ttl

    @name_ttl.setter
    def name_ttl(self, name_ttl):
        """Sets the name_ttl of this NameEntry.


        :param name_ttl: The name_ttl of this NameEntry.  # noqa: E501
        :type: int
        """

        self._name_ttl = name_ttl

    @property
    def pointers(self):
        """Gets the pointers of this NameEntry.  # noqa: E501


        :return: The pointers of this NameEntry.  # noqa: E501
        :rtype: str
        """
        return self._pointers

    @pointers.setter
    def pointers(self, pointers):
        """Sets the pointers of this NameEntry.


        :param pointers: The pointers of this NameEntry.  # noqa: E501
        :type: str
        """

        self._pointers = pointers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NameEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
