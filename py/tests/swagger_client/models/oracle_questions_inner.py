# coding: utf-8

"""
    Aeternity Epoch

    This is the [Aeternity](https://www.aeternity.com/) Epoch API.  # noqa: E501

    OpenAPI spec version: 0.6.0
    Contact: apiteam@aeternity.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OracleQuestionsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_id': 'str',
        'query': 'str',
        'query_fee': 'int',
        'expires_at': 'int'
    }

    attribute_map = {
        'query_id': 'query_id',
        'query': 'query',
        'query_fee': 'query_fee',
        'expires_at': 'expires_at'
    }

    def __init__(self, query_id=None, query=None, query_fee=None, expires_at=None):  # noqa: E501
        """OracleQuestionsInner - a model defined in Swagger"""  # noqa: E501

        self._query_id = None
        self._query = None
        self._query_fee = None
        self._expires_at = None
        self.discriminator = None

        if query_id is not None:
            self.query_id = query_id
        if query is not None:
            self.query = query
        if query_fee is not None:
            self.query_fee = query_fee
        if expires_at is not None:
            self.expires_at = expires_at

    @property
    def query_id(self):
        """Gets the query_id of this OracleQuestionsInner.  # noqa: E501


        :return: The query_id of this OracleQuestionsInner.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this OracleQuestionsInner.


        :param query_id: The query_id of this OracleQuestionsInner.  # noqa: E501
        :type: str
        """

        self._query_id = query_id

    @property
    def query(self):
        """Gets the query of this OracleQuestionsInner.  # noqa: E501


        :return: The query of this OracleQuestionsInner.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this OracleQuestionsInner.


        :param query: The query of this OracleQuestionsInner.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def query_fee(self):
        """Gets the query_fee of this OracleQuestionsInner.  # noqa: E501


        :return: The query_fee of this OracleQuestionsInner.  # noqa: E501
        :rtype: int
        """
        return self._query_fee

    @query_fee.setter
    def query_fee(self, query_fee):
        """Sets the query_fee of this OracleQuestionsInner.


        :param query_fee: The query_fee of this OracleQuestionsInner.  # noqa: E501
        :type: int
        """

        self._query_fee = query_fee

    @property
    def expires_at(self):
        """Gets the expires_at of this OracleQuestionsInner.  # noqa: E501


        :return: The expires_at of this OracleQuestionsInner.  # noqa: E501
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this OracleQuestionsInner.


        :param expires_at: The expires_at of this OracleQuestionsInner.  # noqa: E501
        :type: int
        """

        self._expires_at = expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OracleQuestionsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
