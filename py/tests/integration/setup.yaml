nodes:
  # describe known nodes; these can be both local or remote
  local:
    start: True # if we should start this node or not
    host: localhost
    ports:
      external_api: 3013
      internal_api: 3113
  dev1:
    start: True
    host: localhost
    ports:
      external_api: 3013
      internal_api: 3113
  dev2:
    start: True
    host: localhost
    ports:
      external_api: 3023
      internal_api: 3123
  dev3:
    start: True
    host: localhost
    ports:
      external_api: 3033
      internal_api: 3133
coinbase_reward: 10000000000000000000
tests: # test specific settings
  test_use_cases:
    test_syncing:
      # Alice should be able to connect to peers on startup and download the
      # blockchain up to the current height.
      nodes:
        bob: dev1
        alice: dev2
      blocks_to_mine: 20

    test_persistence:
      # Bob's downloaded blockchain should persist between restarts. He should
      # only download updates to his blockchain when his node starts.
      nodes:
        bob: dev1
      blocks_to_mine: 7
    test_node_discovery_transitively:
      # Assuming Carol's node only knows about Bob upon startup and that Bob's
      # node knows Alice, Carol's node should be able to discover Alice and
      # sync with her node.
      nodes:
        alice: dev1
        bob: dev2
        carol: dev3
      blocks_to_mine: 11
    test_node_discovery_from_common_friend:
      # Assuming Carol's node only knows about Bob upon startup and that Alice's
      # node knows Bob, Carol's node should be able to discover Alice and
      # sync with her node.
      nodes:
        alice: dev1
        bob: dev2
        carol: dev3
      blocks_to_mine: 11
  test_spend_tx:
    test_not_enough_tokens:
    # Bob should not be able to send more tokens than he has
    #
    # Let's say Bob has 100 tokens. He should not be able to send more than
    # 100 tokens to Alice.
    #
    # If there's an incoming but unconfirmed deposit into Bob's account then Bob
    # should not be able to use the incoming tokens until the spend transaction
    # they are in is confirmed.
      nodes:
        miner: dev1
      blocks_to_mine: 3
      send_tokens:
        alice: 1
        bob: 100000
      spend_tx:
        small_amount: 1 # Added to tx fee, less than tokens that Bob has.
        large_amount: 1000000000000000000000 # More than tokens that Bob has.
        fee: 20000
    test_send_by_name:
    # Bob registers a name 'bob.test'
    # Alice should be able to send tokens to Bob using that name
      nodes:
        miner: dev1
      blocks_to_mine: 3
      send_tokens:
        alice: 1000000
        bob: 1000000
      name_register:
        name: "bob.test"
      spend_tx:
        amount: 7
  test_contracts:
    test_compile_and_call_id:
      nodes:
        alice: dev1
    test_encode_id_call:
      nodes:
        alice: dev1
    test_id_call:
      nodes:
        alice: dev1
  test_unsigned_tx:
    test_contract_create:
      nodes:
        node: dev1
      blocks_to_mine: 5
      alice:
        amount: 1000000
        fee: 200000
      create_contract:
        vm_version: 3
        deposit: 2
        amount: 1
        gas: 75000
        gas_used: 193
        gas_price: 1
        fee: 200000
        function: "init"
        argument: "()"
    test_contract_call:
      nodes:
        node: dev1
      blocks_to_mine: 7
      alice:
        amount: 1000000
        fee: 200000
      contract_call:
        vm_version: 3
        fee: 500000
        amount: 10
        gas: 5500
        gas_price: 1
        data:
          function: main
          argument: "42"
    test_spend:
      nodes:
        node: dev1
      blocks_to_mine: 7
      alice:
        amount: 50000
        fee: 20000
      spend_tx:
        amount: 13
        fee: 20000
        recipient: ak_kMPkyaK7Wqcwz2VFXaSzUREpNTnypUBXYz8mDL1BRGUFjYoZa
  test_api_usage_contracts_counter:
    miner_node: dev1
    blocks_to_mine: 7
    users:
      a:
        balance: 1000000
      b:
        balance: 1000000
    min_spend_tx_fee: 20000
