* Transaction lifecycle is: the transaction is being prepared and posted to a
  node, then if it is valid it lands in the mempool, it is gossiped to all
  peers in the network, it is picked by a miner and then included in a block.
  If a transaction stays in the pool for too long time (2 weeks) and is not
  included in a block, there might be an issue with it (ex. `origin` doesn't
  have enough tokens to spend) and it is garbage collected. There used to be a
  check ensuring GCed transactions do not end up in the mempool ever again.
  This PR disables this check.

* An optional setting for transaction garbage collect TTL is available for the
  node operator to set. It is `mempool.tx_ttl` and its default value is 2
  weeks.

* The transaction pool is being protected by DDos attacks via a caching layer
  so only new transactions ever reach the pool. There is a new setting for the
  node operator to define the cache size in amount of transactions to keep. It
  is `mempool.cache_size` with a default value of 200.
