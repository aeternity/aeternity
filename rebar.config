%% The requirements on the OTP version come mainly from the patches
%% for OTP modules - see `otp_patches/` - requiring the version of
%% certain OTP applications, e.g. `mnesia`, to be well known in order
%% for such patches to be applied deterministically.
%%
%% The expected patched OTP modules required for the OTP release are
%% copied explicitly one by one as part of the `relx` overlay
%% configuration (in this `rebar.config`), in order to prevent
%% silently skipping patches e.g. because not built.
%%
%% If the user has a version of OTP that satisfies the specified
%% required minimum OTP version and that includes OTP applications
%% with version different (e.g. greater) than the well known ones
%% (e.g. because of a new OTP version with a higher-versioned OTP
%% application e.g. `mnesia`), then the patched OTP modules are not
%% built (!) though the explicit copying in the `relx` overlay fails.
%% Addressing such a failure consists of updating the content of
%% `otp_patches/`.
{minimum_otp_vsn, "20.1"}.

{erl_opts, [debug_info, {parse_transform, lager_transform},
            {lager_extra_sinks, [epoch_mining, epoch_pow_cuckoo,
                                 epoch_metrics]}]}.

{deps, [{lager, ".*", {git, "https://github.com/aeternity/lager.git", {tag,"3.6.0.ae1"}}},
        {setup, "2.0.2"},
        {parse_trans, "3.2.0"},
        {mnesia_rocksdb, ".*", {git, "https://github.com/aeternity/mnesia_rocksdb.git", {ref,"618870f"}}},
        {enacl, ".*", {git,"https://github.com/aeternity/enacl.git", {ref,"2f50ba6"}}},
        {enoise, ".*", {git, "https://github.com/aeternity/enoise.git", {ref, "e3baa21"}}},
        {cowboy, "2.2.2", {git, "https://github.com/ninenines/cowboy.git", {tag, "2.2.2"}}},
        {jsx, {git, "https://github.com/talentdeficit/jsx.git", {tag, "2.8.0"}}},
        {jesse, {git, "https://github.com/aeternity/jesse.git", {ref, "4640ad1"}}}, %% Tag `1.5.0-rc2` with workaround for unexported `http_uri:uri()` type.
        {gproc, "0.6.1"},
        {jobs, "0.7.1"},
        {exometer_core, {git, "https://github.com/Feuerlabs/exometer_core.git", {ref, "f088de5"}}},
        {poolboy, "1.5.1"},
        {yamerl, "0.7.0"},
        {msgpack, "0.7.0"},
        {base58, {git, "https://github.com/aeternity/erl-base58.git", {ref,"7f6e917"}}},
        {eper, ".*", {git, "git://github.com/massemanet/eper.git", {tag, "0.97.6"}}},
        {erlexec, ".*", {git, "https://github.com/saleyn/erlexec.git", {ref, "97a5188"}}},
        {sha3, {git, "https://github.com/szktty/erlang-sha3", {ref, "dbdfd12"}}},
        {sext, {git, "https://github.com/uwiger/sext.git", {ref, "615eebc"}}},
        {idna, {git, "https://github.com/aeternity/erlang-idna", {ref, "24bf647"}}}
       ]}.

{plugins, [{swagger_endpoints, {git, "https://github.com/aeternity/swagger_endpoints", {tag, "v0.2.0"}}}]}.
{swagger_endpoints, [{src, "config/swagger.yaml"}, {dst, "apps/aeutils/src/endpoints.erl"}]}.

{relx, [{release, { epoch, "version value comes from VERSION" },
         % sasl is required for the command `epoch versions` to work,
         % it is disabled in `sys.config` though.
         [runtime_tools, sasl, lager, setup, sext, rocksdb, mnesia_rocksdb, gproc,
          jobs, {mnesia, load}, exometer_core, ranch, aecore, aehttp, enacl, enoise,
          aebytecode, aevm, aechannel, aesophia]},
        {sys_config, "./config/sys.config"},
        {vm_args, "./config/vm.args"},

        {dev_mode, true},
        {include_erts, false},

        {overlay, [{copy, "REVISION", "REVISION"},
                   {copy, "VERSION" , "VERSION"},
                   {copy, "docs/installation.md" , "docs/installation.md"},
                   {copy, "docs/configuration.md" , "docs/configuration.md"},
                   {copy, "docs/operation.md" , "docs/operation.md"},
                   {copy, "docs/release-notes" , "docs/release-notes"},
                   {mkdir, "data/aecore/.genesis"},
                   {copy, "data/aecore/.genesis/accounts.json", "data/aecore/.genesis/accounts.json"},
                   {copy, "hooks/pre_start.sh", "bin/hooks/pre_start.sh"},
                   {copy, "apps/check_config/priv/extensions/check_config.sh", "bin/extensions/check_config"},
                   {copy, "apps/aeutils/priv/extensions/get_peer_key.sh", "bin/extensions/peer_key"},
                   {copy, "apps/aeutils/test/data/epoch_testnet.yaml", "docs/examples/epoch_testnet.yaml"},
                   {copy, "otp_patches/ebin/mnesia.beam"       , "patches/ebin/mnesia.beam"       },
                   {copy, "otp_patches/ebin/mnesia_index.beam" , "patches/ebin/mnesia_index.beam" }
                  ]},

        {extended_start_script, true},
        {extended_start_script_hooks, [
          {pre_start, [{custom, "hooks/pre_start.sh"}]}
        ]},
        {extended_start_script_extensions, [
              {check_config, "extensions/check_config"},
              {peer_key, "extensions/peer_key"}
        ]}]
}.

{profiles, [{local, [{relx, [{dev_mode, true},
                             {include_erts, false},
                             {include_src, true}]}]
            },
            {dev1, [{relx, [{dev_mode, false},
                            {include_erts, false},
                            {sys_config, "./config/dev1/sys.config"},
                            {vm_args, "./config/dev1/vm.args"},
                            {overlay, [{mkdir, "{{output_dir}}/data"},
                                       {copy,
                                        "_build/dev1/bin/check_config",
                                        "{{output_dir}}/bin/check_config"},
                                       {copy,
                                       "_build/dev1/lib/aeutils/priv/epoch_config_schema.json",
                                       "{{output_dir}}/data/epoch_config_schema.json"}]}
                           ]}
                    ]
            },
            {test, [{relx, [{dev_mode, true},
                            {include_erts, false},
                            {include_src, true},
                            {sys_config, "./config/dev1/sys.config"},
                            {vm_args, "./config/dev1/vm.args"}]},
                    {dist_node, [{setcookie, 'epoch_cookie'},
                                 {sname, 'epoch_ct@localhost'}]},
                    {deps, [{meck, ".*", {git, "git://github.com/eproxus/meck.git", {tag, "0.8.6"}}},
                            {websocket_client, ".*", {git,
                            "git://github.com/aeternity/websocket_client",
                            {ref, "a4fb3db"}}}
                           ]}
                   ]},
            {prod, [{relx, [{dev_mode, false},
                            {include_erts, true},
                            {include_src, false},
                            {overlay, [{copy,
                                        "_build/prod/bin/check_config",
                                        "bin/check_config"},
                                       {copy,
                                        "_build/prod/lib/aeutils/priv/epoch_config_schema.json",
                                        "data/epoch_config_schema.json"}]}
                           ]}
                   ]},
            {system_test, [
                {extra_src_dirs, ["system_test", "system_test/helpers"]},
                {shell, [{apps, []}]},
                {deps, [
                    bbmustache,
                    {hackney, "1.12.1"}
                ]}
            ]}
           ]
}.

{escript_main_app, check_config}.
{escript_name, "check_config"}.
{escript_incl_apps, [aeutils, jsx, yamerl, jesse, rfc3339]}.
{escript_shebang, "#!/usr/bin/env escript\n"}.
{escript_comment, "%%\n"}.

{overrides, [{override, exometer_core,
              [{erl_opts, [{d,'HUT_LAGER'},
                           {parse_transform, lager_transform},
                           debug_info,
                           fail_on_warning,
                           {platform_define, "^((1[8|9])|2)", rand_module},
                           {verbosity, trace}]}]}]}.

{provider_hooks,
 [{post, [{compile, escriptize}]}]}.

{pre_hooks, [{"(linux|darwin|solaris|netbsd|freebsd)", compile,
              "git rev-parse HEAD > ${REBAR_ROOT_DIR}/REVISION"},
             {compile, "make -C ./otp_patches all"},
             {compile, "./rebar3 swagger_endpoints"},
             {compile, "erlc test/ct_eunit_xform.erl"} %% {ct_first_files, _} does not work
            ]}.

{post_hooks, [{"(linux|darwin|solaris|netbsd|freebsd)", compile, "rm ct_eunit_xform.beam"},
              {clean, "make -C ./otp_patches clean"},
              {"(linux|darwin|solaris|netbsd|freebsd)", clean, "rm -f ${REBAR_ROOT_DIR}/REVISION"}
             ]}.

{overrides, [{override, sha3, [{pre_hooks, [{"(linux|darwin)", compile, "make "},
					    {"(linux|darwin)", release, "make "},
					    {"(linux|darwin)", eunit, "make "}]}
			      ]}
	    ]}.

{ct_opts, [
  {ct_hooks, [{cth_surefire, [{path, "../junit.xml"}]}]}
]}.

{dialyzer, [
            {warnings, [unknown]},
            {plt_apps, all_deps},
            {base_plt_apps, [erts, kernel, stdlib, crypto, mnesia]}
           ]}.
