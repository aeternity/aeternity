#!/bin/bash

set -ev # Ref https://docs.travis-ci.com/user/customizing-the-build/#Implementing-Complex-Build-Steps
set -x

OsLabel="ubuntu"
if [ "${TRAVIS_OS_NAME:?}" = "osx" ]; then
    OsLabel="osx-$(sw_vers -productVersion)"
fi

BuildDir=${3:?}
DeployEnv=${4:-test}
Version=$(cat VERSION)
BuiltPackagePath="${BuildDir:?}"/_build/prod/rel/epoch/epoch-"${Version:?}".tar.gz
FinalPackagePath="${BuildDir:?}"/_build/prod/rel/epoch/epoch-"${Version:?}"-"${OsLabel:?}".tar.gz

# Set default working directory
cd $BuildDir

case "${1:?}"-"${2:?}" in
    before_install-*)
        if [ "${TRAVIS_OS_NAME:?}" = "osx" ]; then
            export HOMEBREW_CACHE="$HOME/Library/Caches/Homebrew"
            brew update
            brew install erlang && export PATH="$(brew --prefix erlang)"/bin:"$PATH"
        elif [ "${TRAVIS_OS_NAME:?}" = "linux" ]; then
            sudo -H pip install -r deployment/ansible/pip-requirements.txt
            ansible --version
        fi
        erl -version
        epmd -daemon
        ;;
    install-dialyzer)
        make dialyzer-install
        ;;
    install-*)
        true
        ;;
    script-test)
        make test
        ;;
    script-eunit)
        make eunit
        ;;
    script-dialyzer)
        make dialyzer
        ;;
    script-package)
        make prod-package
        mv "${BuiltPackagePath:?}" "${FinalPackagePath:?}"
        # Perform release acceptance testing on the built package.
        # Configure a simpler PoW than the default one, in order to
        # speed up mining during the tests.
        make python-env
        make python-release-test TARBALL="${FinalPackagePath:?}"
        ;;
    after_failure-*)
        LogsDir="${BuildDir}/_build/test/logs"
        echo "logs/ct.latest.log\n"
        cat ${LogsDir}/ct.latest.log
        ls -l ${LogsDir}/latest.sync
        for f in `ls -1 ${LogsDir}/ct_run*/lib.*.logs/run*/suite.log`; do escript failed_logs.escript $f; done
        for f in `ls ${BuildDir}/_build/test/logs/latest.sync/dev*/data/epoch.json`; do echo \"\"; echo \"$f:\"; echo \"\"; ls -l $f; cat $f; done
        for f in `ls ${BuildDir}/_build/test/logs/latest.sync/dev*/releases/*/sys.config`; do echo \"\"; echo \"$f:\"; echo \"\"; ls -l $f; cat $f; done
        for f in `ls ${BuildDir}/_build/test/logs/latest.sync/dev*/releases/*/vm.args`; do echo \"\"; echo \"$f:\"; echo \"\"; ls -l $f; cat $f; done
        for f in `ls ${BuildDir}/_build/test/logs/latest.sync/dev*/*.config`; do echo \"\"; echo \"$f:\"; echo \"\"; ls -l $f; cat $f; done
        for f in `ls ${BuildDir}/_build/test/logs/latest.sync/dev*/log/erlang.log.*`; do echo \"\"; echo \"$f:\"; echo \"\"; cat $f; done
        for f in `ls ${BuildDir}/_build/test/logs/latest.sync/dev*/log/epoch.log`; do echo \"\"; echo \"$f:\"; echo \"\"; cat $f; done
        for f in `ls ${BuildDir}/_build/test/logs/latest.sync/dev*/log/epoch_mining.log`; do echo \"\"; echo \"$f:\"; echo \"\"; cat $f; done
        for f in `ls ${BuildDir}/_build/test/logs/latest.sync/dev*/log/crash.log`; do echo \"\"; echo \"$f:\"; echo \"\"; cat $f; done
        ;;
    deploy-package)
        # Free Travis version does not support SSH key pairs, thus using encrypted files for SSH deploy key
        # https://docs.travis-ci.com/user/encrypting-files/
        openssl aes-256-cbc -K $encrypted_a2e547bcd39e_key -iv $encrypted_a2e547bcd39e_iv -in deployment/ansible/files/travis/deploy_key.enc -out /tmp/deploy_rsa -d
        # ssh agent does not accept world readable keys
        chmod 600 /tmp/deploy_rsa
        eval "$(ssh-agent -s)"
        ssh-add /tmp/deploy_rsa

        cd deployment/ansible
        ansible-playbook -i inventory/openstack.yml --limit="epoch:&${DeployEnv:?}" \
            --extra-vars "local_package=${FinalPackagePath:?} env=${DeployEnv:?} tester_keys_password='${tester_keys_password:?}' datadog_api_key=${datadog_api_key:?} datadog_app_key=${datadog_app_key:?}" \
            deploy.yml
        ;;
    deploy-*)
        true
        ;;
esac
