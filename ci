#!/bin/bash

set -ev # Ref https://docs.travis-ci.com/user/customizing-the-build/#Implementing-Complex-Build-Steps
set -x


Version="$(cat VERSION)"

package_os_label() {
    case "${1:?}" in
        linux)
            echo "ubuntu"
            ;;
        osx)
            echo "osx-$(sw_vers -productVersion)"
            ;;
    esac
}


case "${1:?}"-"${2:?}" in
    before_install-*)
        if [ "${TRAVIS_OS_NAME:?}" = "osx" ]; then
            export HOMEBREW_CACHE="$HOME/Library/Caches/Homebrew"
            brew update
            brew install erlang && export PATH="$(brew --prefix erlang)"/bin:"$PATH"
            brew install lynx && export PATH="$(brew --prefix lynx)"/bin:"$PATH"
        elif [ "${TRAVIS_OS_NAME:?}" = "linux" ]; then
            sudo apt-get -y install lynx
            sudo -H pip install -r deployment/ansible/pip-requirements.txt
            ansible --version
        fi
        erl -version
        epmd -daemon
        ;;
    install-dialyzer)
        BuildDir="${3:?}"
        ( cd "${BuildDir:?}" && ./rebar3 tree; )
        ( cd "${BuildDir:?}" && ./rebar3 dialyzer -u true -s false; )
        ;;
    install-*)
        true
        ;;
    script-test)
        BuildDir="${3:?}"
        ( cd "${BuildDir:?}" && make test; )
        ;;
    script-dialyzer)
        BuildDir="${3:?}"
        ( cd "${BuildDir:?}" && make dialyzer; )
        ;;
    script-package)
        BuildDir="${3:?}"
        ( cd "${BuildDir:?}" && ./rebar3 as prod tar; )
        BuiltPackagePath="${BuildDir:?}"/_build/prod/rel/epoch/epoch-"${Version:?}".tar.gz
        OsLabel=$(package_os_label "${TRAVIS_OS_NAME:?}")
        FinalPackagePath="${BuildDir:?}"/_build/prod/rel/epoch/epoch-"${Version:?}"-"${OsLabel:?}".tar.gz
        mv "${BuiltPackagePath:?}" "${FinalPackagePath:?}"
        # Perform release acceptance testing on the built package.
        # Configure a simpler PoW than the default one, in order to
        # speed up mining during the tests.
        make python-env
        make release-integration-test TARBALL="${FinalPackagePath:?}"
        ;;
    script-python-tests)
        make multi-build
        make multi-start
        make python-env
        make python-tests
        make multi-stop
        ;;
    script-python-ws-test)
        make multi-build
        make multi-start
        make python-env
        make python-ws-test
        make multi-stop
        ;;
    script-python-integration-tests)
        make multi-build
        make multi-start
        make python-env
        make python-integration-tests
        make multi-stop
        ;;
    after_failure-*)
        BuildDir="${3:?}"
        LogsDir="${BuildDir}/_build/test/logs"
        lynx -dump ${LogsDir}/index.html
        echo "logs/ct.latest.log\n"
        cat ${LogsDir}/ct.latest.log
        for f in `ls -1 ${LogsDir}/ct_run*/*.logs/run*/suite.log.html`; do echo \"\"; echo \"$f:\"; lynx -dump $f; done
        for f in `ls ${BuildDir}/_build/dev*/rel/epoch/log/erlang.log.*`; do echo \"\"; echo \"$f:\"; echo \"\"; cat $f; done
        for f in `ls ${BuildDir}/_build/dev*/rel/epoch/log/epoch.log`; do echo \"\"; echo \"$f:\"; echo \"\"; cat $f; done
        for f in `ls ${BuildDir}/_build/dev*/rel/epoch/log/crash.log`; do echo \"\"; echo \"$f:\"; echo \"\"; cat $f; done
        ;;
    deploy-package)
        # Free Travis version does not support SSH key pairs, thus using encrypted files for SSH deploy key
        # https://docs.travis-ci.com/user/encrypting-files/
        openssl aes-256-cbc -K $encrypted_a2e547bcd39e_key -iv $encrypted_a2e547bcd39e_iv -in deployment/ansible/files/travis/deploy_key.enc -out /tmp/deploy_rsa -d
        # ssh agent does not accept world readable keys
        chmod 600 /tmp/deploy_rsa
        eval "$(ssh-agent -s)"
        ssh-add /tmp/deploy_rsa

        BuildDir="${3:?}"
        DeployEnv="${4:?}"
        OsLabel=$(package_os_label "${TRAVIS_OS_NAME:?}")
        TARBALL="${BuildDir:?}"/_build/prod/rel/epoch/epoch-"${Version:?}"-"${OsLabel:?}".tar.gz
        ( cd deployment/ansible && ansible-playbook -i inventory/openstack.yml --limit="epoch:&${DeployEnv}" --extra-vars "local_package=${TARBALL}" deploy.yml )
        ;;
    deploy-*)
        true
        ;;
esac
