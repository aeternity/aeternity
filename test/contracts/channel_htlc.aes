
@compiler >= 6

// Adapted from JellySwap's JellyHTLC for State Channel markets
include "List.aes"
include "String.aes"

contract ChannelHTLC = 

  record state = { sends           : map(hash, send),
                   receives        : map(hash, recv),
                   client          : address,
                   hub             : address,
                   minimum_fee     : int,
                   default_timeout : int }

  datatype status = INVALID | ACTIVE | REFUNDED | COLLECTED

  record recv = {
    amount : int,
    hash_lock : hash,
    status    : status,
    sender    : address,
    timeout   : int }

  record send = {
    amount    : int,
    fee       : int,
    hash_lock : hash,
    status    : status,
    receiver  : address,
    timeout   : int }

  entrypoint init(
      client'        : address,
      minimum_fee'   : int,
      default_timeout' : int ) : state =

    { client          = client',
      hub             = Call.caller,
      minimum_fee     = minimum_fee',
      default_timeout = default_timeout',
      sends           = {},
      receives        = {}
      }

  // Called by the client in order to initiate a new send.
  // Before doing this, the receiver must have provided a hashed secret
  // (passed as `hash_lock`)
  // Note that timeout' is the relative timeout
  payable stateful entrypoint new_send(
      amount' : int,
      receiver' : address,
      fee' : int,
      timeout' : int,
      hash_lock' : hash ) : int =

    require( Call.caller == state.client, "Not client" )
    require( fee' >= state.minimum_fee, "Fee too low" )
    require( amount' > 0, "Invalid amount")
    require( Call.value == (amount' + fee'), "Wrong value (should be amount + fee)" )
    require( timeout' >= 0, "Invalid timeout")

    // Do not include fee in id calculation
    let id : hash = generate_id(state.client, receiver', amount', hash_lock')

    let abs_timeout : int = abs_timeout(timeout', state.default_timeout, Chain.block_height)

    require(!send_exists(id), "Send entry already exists")

    let _send : send = { 
      amount = amount',
      fee = fee',
      hash_lock = hash_lock',
      status = ACTIVE,
      receiver = receiver',
      timeout = abs_timeout }

    put(state{ sends[id] = _send })
    abs_timeout

  // Called by the hub on the receiver channel in order to forward
  // the send request. The `hash_lock` is the one provided by the reciever earlier
  // There is no fee here, since the fee is paid by the sender and collected by
  // the hub.
  //
  // Note that timeout' here is the absolute timeout
  payable stateful entrypoint new_receive(
      amount' : int,
      sender' : address,
      timeout' : int,
      hash_lock' : hash ) : hash =
    require( Call.caller == state.hub, "Not hub" )
    require( amount' > 0, "Invalid amount" )
    require( Call.value == amount', "Wrong value (should be amount)")

    let id : hash = generate_id(sender', state.client, amount', hash_lock')

    require(!recieve_exists(id), "Recieve entry already exists")

    let _recv : recv = {
            amount = amount',
            hash_lock = hash_lock',
            status = ACTIVE,
            sender = sender',
            timeout = timeout' }
    put(state{receives[id] = _recv})
    id

  // Called by the hub to collect the collateral + the fee
  // To be safe, the withdraw should be performed before 
  payable stateful entrypoint collect(
           receiver'  : address,
           amount'    : int,
           hash_lock' : hash,
           secret'    : hash ) : unit =
    require( Call.caller == state.hub, "Unauthorized")
    let id : hash = generate_id(state.client, receiver', amount', hash_lock')
    let _send : send = state.sends[id]
    collectable(_send, secret')
    Chain.spend(state.hub, _send.amount + _send.fee)
    put(state{sends[id].status = COLLECTED})

  payable stateful entrypoint receive(
        sender'  : address,
        amount'  : int,
        hash_lock' : hash,
        secret'    : hash ) : unit =
    require( Call.caller == state.client, "Unauthorized")
    let id : hash = generate_id(sender', state.client, amount', hash_lock')
    let _recv : recv = state.receives[id]
    receivable(_recv, secret')
    Chain.spend(state.client, _recv.amount)
    put(state{ receives[id].status = COLLECTED })

  // Called by client in order to get a refund. This will only be allowed
  // under certain circumstances.
  payable stateful entrypoint refund(
        receiver'  : address,
        amount'    : int,
        hash_lock' : hash ) : unit =
    require(Call.caller == state.client, "Unauthorized")
    let id : hash = generate_id(Call.caller, receiver', amount', hash_lock')
    let _send : send = state.sends[id]
    refundable(_send)
    
    Chain.spend(state.client, _send.amount)
    Chain.spend(state.hub, _send.fee)

    put(state{ sends[id].status = REFUNDED })

  // Called by the hub in order to get a refund on the collateral.
  // This will only be allowed after Timeout + 3 blocks
  payable stateful entrypoint refund_receive(
        id' : hash ) : unit =
    let _recv: recv = state.receives[id']
    refundable_receive(_recv)
    Chain.spend(state.hub, _recv.amount)
    put(state{ receives[id'].status = REFUNDED })

  entrypoint get_send_status(id : hash) : status =
    let _send : send = state.sends[id]
    _send.status

  entrypoint get_many_send_status(ids : list(hash)) : list(status) =
    List.map((id) => get_send_status(id), ids)

  entrypoint generate_id(sender : address, receiver : address,
   amount : int, hash_lock : hash) : hash =
    let packed_string : string = 
     cc([
       Address.to_str(sender),
       Address.to_str(receiver),
       Int.to_str(amount),
       Bytes.to_str(hash_lock)])
    
    Crypto.sha256(packed_string)

  entrypoint get_send(id : hash) : send =
    require(send_exists(id), "SEND_NOT_FOUND")
    state.sends[id]

  function abs_timeout(timeout' : int, default' : int, height' : int) : int =
    if (timeout' == 0)
      height' + default'
    else
      height' + timeout'

  function collectable(_send : send, secret : hash) =
    require(is_active(_send.status), "NOT_ACTIVE")
    require(_send.hash_lock == Crypto.sha256(secret), "INVALID_SECRET")
    require(Chain.block_height < _send.timeout + 1, "COLLECT_TIMEOUT")

  function receivable(_recv : recv, secret : hash) =
    require(is_active(_recv.status), "NOT_ACTIVE")
    require(_recv.hash_lock == Crypto.sha256(secret), "INVALID_SECRET")
    require(Chain.block_height < _recv.timeout, "RECEIVE_TIMEOUT")

  function refundable(_send: send) =
    require(is_active(_send.status), "NOT_ACTIVE")
    require(state.client == Call.caller, "UNAUTHORIZED")
    require(Chain.block_height >= _send.timeout + 3, "NOT_YET_REFUNDABLE")

  function refundable_receive(_recv: recv) =
    require(is_active(_recv.status), "NOT_ACTIVE")
    require(state.hub == Call.caller, "UNAUTHORIZED")
    require(Chain.block_height >= _recv.timeout + 3, "NOT_YET_REFUNDABLE")

  function is_active(x : status) : bool =
    x == ACTIVE

  function send_exists(id : hash) : bool =
    Map.member(id, state.sends)

  function recieve_exists(id : hash) : bool =
    Map.member(id, state.receives)

  function cc(s :: ss : list(string)) : string =
    List.foldl(String.concat, s, ss)

  function concat(ss : list(string)) : string =
   cc(List.intersperse(",", ss))
