// Contract from https://github.com/LimeChain/aepp-token-migration-smart-contract
// Commit: 9909f608e2ddfbe1f9c0e9820f45bcea170a955d
contract TokenMigration =

    datatype event = Migrated(string, address, int)

    type set('a) = map('a, unit)

    /*
    root_hash - the root hash of the merkle tree used for validation
    migrations_count - used for backendless tracking
    map_transfered_accounts - map that will track migrated accounts
    */
    record state =
        { root_hash: string,
          migrations_count: int,
          map_transfered_accounts: set(string) }

    entrypoint init(root_hash: string, count: int) : state =
        { root_hash = root_hash,
          migrations_count = count,
          map_transfered_accounts = {} }


    /*
    token_amount - the amount of tokens that the user will migrate
    ae_address - aeternity account address to whom the tokens will be transferred
    leaf_index - the index of the leaf in the merkle tree, needed to calculate the root_hash
    siblings - the siblings of the leaf, needed to calculate the root_hash,
    sig - the eth signature, which should contain the aeternity address as a message.
    */
    stateful entrypoint migrate(token_amount: int, ae_address: address, leaf_index: int, siblings: list(string), sig: bytes(65)) =
        require(Address.is_payable(ae_address), "Passed AE address is not payable")

        let ae_address_str = Address.to_str(ae_address)
        let unhashed_msg = String.concat("\x19Ethereum Signed Message:\n", String.concat(Int.to_str(String.length(ae_address_str)), ae_address_str))
        let hashed_msg = String.sha3(unhashed_msg)

        // By providing the hashed_ae_address to the ecrevocer we are sure that the eth_address is correct
        let recovered_eth_address = get_signer(hashed_msg, sig)
        let recovered_eth_address_string = switch (recovered_eth_address)
                                            None => abort("Failed to recover address, bad signature")
                                            Some(recovered) => String.concat("0X", Bytes.to_str(recovered))

        require(!is_migrated(recovered_eth_address_string), "This account has already transferred its tokens")
        require(contained_in_merkle_tree(recovered_eth_address_string, token_amount, leaf_index, siblings), "From provided data, cannot be generated same root")

        Chain.spend(ae_address, token_amount)
        put(state{migrations_count = state.migrations_count + 1})
        put(state{map_transfered_accounts[recovered_eth_address_string] = ()})

        Chain.event(Migrated(recovered_eth_address_string, ae_address, token_amount))

        state.migrations_count


    function get_signer(msg_hash: hash, sig: bytes(65)) =
        Crypto.ecrecover_secp256k1(msg_hash, sig)

    entrypoint contained_in_merkle_tree(eth_addr: string, token_amount: int, leaf_index: int, siblings: list(string) ) =
        // concat leaf_data => eth_Addr:tokens => concatenated data
        let leaf_data = String.concat(eth_addr, String.concat(":", Int.to_str(token_amount)))

        // concatenated data -> hash
        let leaf_data_hashed = Bytes.to_str(String.sha3(leaf_data)) // hash -> str

        let root = calculate_root(siblings, leaf_index, leaf_data_hashed)

        // generated merkle tree hash should be same as inited one
        root == state.root_hash

    function calculate_root(els : list(string), index : int, root : string) =
        switch(els)
            []        => root
            el :: els =>
                let data = if (index mod 2 == 1) String.concat(el, root) else String.concat(root, el)
                calculate_root(els, index / 2, Bytes.to_str(String.sha3(data)))

    entrypoint balance() = Contract.balance
    entrypoint root_hash() = state.root_hash
    entrypoint migrations_count() = state.migrations_count
    entrypoint is_migrated(eth_address: string) = Map.member(eth_address, state.map_transfered_accounts)
