contract Test =
  stateful entrypoint preclaim(addr  : address, chash : hash) : unit =
    AENSv2.preclaim(addr, chash)

  stateful entrypoint claim(addr : address, name : string, salt : int, name_fee : int) : unit =
    AENSv2.claim(addr, name, salt, name_fee)

  stateful entrypoint test(addr : address, name : string) =
    let p1 = AENSv2.AccountPt(addr)
    let p2 = AENSv2.ContractPt(addr)
    let p3 = AENSv2.OraclePt(Call.caller)
    let p4 = AENSv2.ChannelPt(addr)
    let pts = {["account_pubkey"] = p1, ["contract_pubkey"] = p2,
               ["misc1"] = p3, ["misc2"] = p4}

    AENSv2.update(addr, name, Some(RelativeTTL(1000)), None, Some(pts))

    // Check that we can't lookup things that isn't there
    let None = AENSv2.lookup("not-there.chain")

    // Check that we can't lookup invalid labels
    let None = AENSv2.lookup("not_there.chain")

    // Check that we can lookup existing name
    let Some(AENSv2.Name(owner, ttl, pts2)) = AENSv2.lookup(name)

    require(pts2 == pts, "Pointers not ok")
    require(owner == addr, "Owner not ok")

    // Do another update, but don't change anything
    AENSv2.update(addr, name, None, None, None)
    let Some(AENSv2.Name(_, _, pts2)) = AENSv2.lookup(name)
    require(pts2 == pts, "Pointers not ok 2")

    // Check TTL update
    let h = Chain.block_height
    AENSv2.update(addr, name, Some(RelativeTTL(2000)), None, None)
    let Some(AENSv2.Name(_, FixedTTL(ttl), pts2)) = AENSv2.lookup(name)
    require(ttl == h + 2000, "TTL not ok")
    require(pts2 == pts, "Pointers not ok 3")

    let ax  = ak_pbtwgLrNu23k9PA6XCZnUbtsvEFeQGgavY4FS2do3QP8kcp2z
    let pts = {["account_pubkey"] = AENSv2.AccountPt(ax), ["blafoo"] = AENSv2.AccountPt(ax)}
    AENSv2.update(addr, name, None, None, Some(pts))
    let Some(AENSv2.Name(_, _, pts2)) = AENSv2.lookup(name)
    require(pts2 == pts, "Pointers not ok 4")

    let Some(a1) : option(address) = AENSv2.resolve(name, "account_pubkey")
    let Some(a2) : option(address) = AENSv2.resolve(name, "blafoo")
    require(ax == a1, "Address not ok 1")
    require(ax == a2, "Address not ok 2")

    true
