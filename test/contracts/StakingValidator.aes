contract interface RewardCallbackI =
  entrypoint reward_cb : (int, int, bool) => unit

contract interface MainStakingI =
  payable entrypoint deposit          : () => unit
  payable entrypoint stake            : () => unit
  entrypoint adjust_stake             : (int) => unit
  entrypoint withdraw                 : (int) => unit
  entrypoint get_staked_amount        : (int) => int
  entrypoint get_available_balance    : () => int
  entrypoint get_total_balance        : () => int
  entrypoint register_reward_callback : (RewardCallbackI) => unit

payable contract StakingValidator =
  record state =
    { main_staking_ct : MainStakingI,
      owner           : address,
      signing_key     : address,
      reward_callback : option(RewardCallbackI)
    }

  entrypoint init(main_staking_ct : MainStakingI, owner : address, signing_key : address) =
    { main_staking_ct = main_staking_ct,
      owner           = owner,
      signing_key     = signing_key,
      reward_callback = None }

  payable stateful entrypoint deposit() =
    require(Call.value > 0, "Deposit must be positive")
    assert_owner_caller()
    state.main_staking_ct.deposit(value = Call.value)

  payable stateful entrypoint stake() =
    require(Call.value > 0, "Stake must be positive")
    assert_owner_caller()
    state.main_staking_ct.stake(value = Call.value)

  stateful entrypoint adjust_stake(adjust_amount : int) =
    assert_owner_caller()
    state.main_staking_ct.adjust_stake(adjust_amount)

  stateful entrypoint withdraw(amount : int) =
    assert_owner_caller()
    state.main_staking_ct.withdraw(amount)
    Chain.spend(Call.caller, amount)

  entrypoint get_staked_amount(epoch : int) =
    state.main_staking_ct.get_staked_amount(epoch)

  entrypoint get_available_balance() =
    state.main_staking_ct.get_available_balance()

  entrypoint get_total_balance() =
    state.main_staking_ct.get_total_balance()

  stateful entrypoint register_reward_callback(cb_ct : RewardCallbackI) =
    assert_owner_caller()
    put(state{reward_callback = Some(cb_ct)})

  entrypoint rewards(epoch : int, amount : int, restaked : bool) =
    assert_main_staking_caller()
    switch(state.reward_callback)
      None => None
      Some(cb_ct) => cb_ct.reward_cb(protected = true, gas = 20000, epoch, amount, restaked)
    ()

  function assert_owner_caller() =
    require(Call.caller == state.owner, "Only contract owner allowed")

  function assert_main_staking_caller() =
    require(Call.caller == state.main_staking_ct.address, "Only main staking contract allowed")
