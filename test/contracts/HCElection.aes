include "List.aes"
include "Pair.aes"
include "String.aes"

contract interface MainStaking =
  entrypoint sorted_validators : () => list((address * int))
  entrypoint lock_stake  : (int) => list((address * int))
  entrypoint add_rewards : (int, list(address * int)) => unit
  entrypoint add_penalties : (int, list(address * int)) => unit

main contract HCElection =
  record epoch_info =
    { start                 : int,
      length                : int,
      seed                  : option(bytes()),
      staking_distribution  : option(list(address * int))
    }

  record pin_reward_info =
    { base       : int,
      current    : int,
      carry_over : int
    }

  record vote =
    { producer    : address,
      hash        : hash,
      sign_data   : bytes(),
      signature   : signature
    }

  record epoch_length_vote =
    { producer    : address,
      epoch_delta : int,
      sign_data   : bytes(),
      signature   : signature
    }

  record finalize_info =
    { epoch        : int,
      fork         : option(bytes()),
      epoch_length : option(int),
      pc_hash      : bytes(),
      producer     : address,
      votes        : option(list(vote)),
      length_votes : option(list(epoch_length_vote))
    }

  record state =
    { main_staking_ct       : MainStaking,
      leader                : address,
      rewards               : map(int, list(address * int)),
      penalties             : map(int, list(address * int)),
      epoch                 : int,
      epochs                : map(int, epoch_info),
      pin                   : option(bytes()),
      pin_reward            : pin_reward_info,
      finalize              : option(finalize_info())
    }

  entrypoint init(main_staking_ct : MainStaking) =
    { main_staking_ct       = main_staking_ct,
      leader                = Contract.address,
      rewards               = {},
      epoch                 = 0,
      epochs                = {},
      pin                   = None,
      finalize              = None,
      penalties             = {},
      pin_reward            = {base = 0, current = 0, carry_over = 0} }

  stateful entrypoint init_epochs(epoch_length : int, base_pin_reward : int) =
    assert_protocol_call()
    require(Chain.block_height == 0, "Only in genesis")
    put(state{ epochs = { [0] = mk_epoch_info(0, 1, None, None),
                          [1] = mk_epoch_info(1, epoch_length, None, Some(state.main_staking_ct.lock_stake(1))),
                          [2] = mk_epoch_info(epoch_length + 1, epoch_length, None, Some(state.main_staking_ct.lock_stake(2))),
                          [3] = mk_epoch_info(2 * epoch_length + 1, epoch_length, None, Some(state.main_staking_ct.lock_stake(3))),
                          [4] = mk_epoch_info(3 * epoch_length + 1, epoch_length, None, Some(state.main_staking_ct.lock_stake(4)))
                        },
               epoch  = 1,
               pin_reward.base = base_pin_reward
             })

  function mk_epoch_info(start : int,
                         length : int,
                         seed : option(bytes),
                         staking_distribution : option(list(address * int))) =
    {start = start, length = length, seed = seed, staking_distribution = staking_distribution}

  stateful entrypoint step(leader : address) =
    assert_protocol_call()
    put(state{ leader = leader })

  stateful entrypoint step_micro(leader : address) =
    assert_protocol_call()
    put(state{ leader = leader })

  stateful entrypoint step_eoe(leader : address, seed : bytes(),
                               next_base_pin_reward : int, carry_over_flag : bool) =
    assert_protocol_call()
    let epoch = state.epoch
    let ei = state.epochs[epoch]
    // pin rewards
    let next_carry_over = calc_carry_over(carry_over_flag)
    let next_base = calc_next_base_reward(next_base_pin_reward)
    let next_reward = next_base + next_carry_over
    let pr = {current = next_reward, carry_over = next_carry_over, base = next_base}

    collect_penalties(state.epoch - 1)
    // pay rewards to sunset epoch
    pay_rewards(state.epoch - 1)

    // update epochs
    require(ei.start + ei.length - 1 == Chain.block_height, String.concats(["This is not the end: ", Int.to_str(ei.start + ei.length - 1), " : ", Int.to_str(Chain.block_height)]))
    let ei_adjust =
      switch(state.finalize)
        None       => state.epochs[epoch + 3]
        Some(info) =>
          if ( info.epoch == epoch )
            switch(info.epoch_length)
              None => state.epochs[epoch + 3]
              Some(epoch_length) =>
                state.epochs[epoch + 3]{ length = epoch_length }
          else
            state.epochs[epoch + 3]

    let new_epochs = { [epoch] = state.epochs[epoch],
                       [epoch + 1] = state.epochs[epoch + 1],
                       [epoch + 2] = state.epochs[epoch + 2]{ seed = Some(seed) },
                       [epoch + 3] = ei_adjust,
                       [epoch + 4] = mk_epoch_info(ei_adjust.start + ei_adjust.length, ei_adjust.length, None,
                                                   Some(state.main_staking_ct.lock_stake(epoch + 4)))
                     }

    put(state{ leader = leader,
               epoch  = epoch + 1,
               epochs = new_epochs,
               pin = None,
               pin_reward = pr})

  stateful entrypoint pin(proof : bytes()) =
    let epoch = state.epoch
    let last = state.epochs[epoch].start + state.epochs[epoch].length - 1
    require(Chain.block_height == last, "Only in last block")
    require(Call.caller == state.leader, "Must be called by the last leader of epoch")
    put(state{pin = Some(proof)})

  payable stateful entrypoint add_reward(height : int, to : address) =
    assert_protocol_call()
    put(state{rewards[height = []] @ rs = (to, Call.value) :: rs})

  stateful entrypoint add_penalty(height : int, penalty : int, to : address) =
      assert_protocol_call()
      require(penalty > 0, "Penalty is expressed as a positive integer")
      put(state{penalties[height = []] @ rs = (to, penalty) :: rs})

  stateful entrypoint add_reported_penalty(height : int, penalty : int, to : address, reporter : address, reporter_percentage : int) =
      assert_protocol_call()
      require(penalty > 0, "Penalty is expressed as a positive integer")
      require(reporter_percentage >= 0 && reporter_percentage =< 100, "reporter reward percentage must be between 0 and 100")
      put(state{penalties[height = []] @ rs = (to, (penalty)) :: rs})
      let reporter_reward = (penalty * reporter_percentage) / 100
      put(state{penalties[height = []] @ rs = (reporter, -reporter_reward) :: rs})

  stateful entrypoint finalize_epoch(epoch_number : int, fork : bytes(), pc_hash : bytes(), producer : address, votes : list(vote)) =
    let epoch = state.epoch
    let last = state.epochs[epoch].start + state.epochs[epoch].length - 1
    require(Chain.block_height == last, "Only in last block")
    require(Call.caller == state.leader, "Must be called by the last leader of epoch")
    require(epoch_number == state.epoch, "Not correct epoch")
    require(List.all(validate_vote, votes), "Invalid vote")
    let ei_final =
      switch(state.finalize)
        None       => {epoch = epoch_number, fork = Some(fork), epoch_length = None, pc_hash = pc_hash, producer = producer, votes = Some(votes), length_votes = None}
        Some(finalize) =>
          if ( finalize.epoch == epoch_number )
            finalize{ fork = Some(fork), votes = Some(votes) }
          else
            {epoch = epoch_number, fork = Some(fork), epoch_length = None, pc_hash = pc_hash, producer = producer, votes = Some(votes), length_votes = None}

    put(state{finalize=Some(ei_final)})

  entrypoint leader() =
    state.leader

  entrypoint epoch() =
    state.epoch

  entrypoint epoch_length() =
    state.epochs[state.epoch].length

  entrypoint epoch_info() =
    (state.epoch, state.epochs[state.epoch])

  entrypoint epoch_info_epoch(epoch : int) =
    require(epoch >= state.epoch - 1 && epoch =< state.epoch + 2, "Epoch not in scope")
    state.epochs[epoch]

  entrypoint staking_contract() =
    state.main_staking_ct

  entrypoint validator_schedule(seed : bytes(), validators : list(address * int), length : int) =
    let total_stake = List.foldl((+), 0, List.map(Pair.snd, validators))
    // One extra hash operation to convert from bytes() to bytes(32)/hash
    validator_schedule_(Crypto.blake2b(seed), (s) => Bytes.to_int(s) mod total_stake, validators, length, [])

  entrypoint pin_info() =
    state.pin

  entrypoint pin_reward_info() =
    state.pin_reward

  entrypoint finalize_info() =
    state.finalize

  function
    validator_schedule_(_, _, _, 0, schedule) = List.reverse(schedule)
    validator_schedule_(seed0, rnd, validators, n, schedule) =
      let seed = Crypto.blake2b(seed0)
      let validator = pick_validator(rnd(seed), validators)
      validator_schedule_(seed, rnd, validators, n - 1, validator :: schedule)

  function
    pick_validator(n, (validator, stake) :: _) | n < stake = validator
    pick_validator(n, (_, stake) :: validators)            = pick_validator(n - stake, validators)

  function assert_protocol_call() =
    require(Call.caller == Contract.creator, "Must be called by the protocol")

  function calc_carry_over(carry_over_flag : bool) =
    let ei = state.pin_reward
    if (carry_over_flag)
      ei.base + ei.carry_over
    else
      0

  function calc_next_base_reward(next_base_pin_reward : int) =
    if ( next_base_pin_reward >= 0 )
      next_base_pin_reward
    else
      state.pin_reward.base

  stateful function pay_rewards(e : int) =
    let ei = state.epochs[e]
    let (rewards, tot) = pay_rewards_(ei.start, ei.length, {}, 0)
    state.main_staking_ct.add_rewards(value = tot, e, rewards)

  stateful function
    pay_rewards_(_, 0, acc, tot) = (Map.to_list(acc), tot)
    pay_rewards_(h, n, acc, tot) =
      switch(Map.lookup(h, state.rewards))
        None      => pay_rewards_(h + 1, n - 1, acc, tot)
        Some(aas) =>
          let (acc1, tot1) = List.foldl(pay_reward_, (acc, tot), aas)
          put(state{rewards @ r = Map.delete(h, r)})
          pay_rewards_(h + 1, n - 1, acc1, tot1)

  function pay_reward_((acc, tot), (addr, amt)) =
    (acc{[addr = 0] @ r = r + amt}, tot + amt)

  stateful function collect_penalties(epoch : int) =
    let ei = state.epochs[epoch]
    let pens = collect_penalties_(ei.start, ei.length, {})
    state.main_staking_ct.add_penalties(epoch, List.sort(compare_pens_, pens)) // penalties first to fill pool, rewards second

  stateful function
    collect_penalties_(_, 0, acc) = Map.to_list(acc)
    collect_penalties_(h, n, acc) =
      switch(Map.lookup(h, state.penalties))
        None      => collect_penalties_(h + 1, n - 1, acc)
        Some(aas) =>
          let acc1 = List.foldl(collect_penalty_, acc, aas)
          put(state{penalties @ r = Map.delete(h, r)})
          collect_penalties_(h + 1, n - 1, acc1)

  function collect_penalty_(acc, (addr, amt)) =
    acc{[addr = 0] @ r = r + amt}

  // sort largest penalties first
  function compare_pens_((_, x), (_, y)) =
    x > y

  function validate_vote(vote) =
    if(Crypto.verify_sig(vote.sign_data, vote.producer, vote.signature))
      contains_bytes(vote.hash, vote.sign_data)
    else
      false

  function contains_bytes(needle : hash, haystack : bytes()) : bool =
    if(Bytes.size(haystack) < 32)
      false
    else
      let Some((bs_, _)) = Bytes.split_any(haystack, 32)
      let Some(bs__) = Bytes.to_fixed_size(bs_)
      if(bs__ == needle)
        true
      else
        let Some((_, haystack_)) = Bytes.split_any(haystack, 1)
        contains_bytes(needle, haystack_)
