diff --git a/lib/mnesia/src/mnesia.erl b/lib/mnesia/src/mnesia.erl
index b68b2de..aefa2d7 100644
--- a/lib/mnesia/src/mnesia.erl
+++ b/lib/mnesia/src/mnesia.erl
@@ -159,7 +160,7 @@
                     {'sync_transaction', Retries::non_neg_integer()}.
 -type table() :: atom().
 -type storage_type() :: 'ram_copies' | 'disc_copies' | 'disc_only_copies'.
--type index_attr() :: atom() | non_neg_integer().
+-type index_attr() :: atom() | non_neg_integer() | {atom()}.
 -type write_locks() :: 'write' | 'sticky_write'.
 -type read_locks() :: 'read'.
 -type lock_kind() :: write_locks() | read_locks().
@@ -1260,6 +1261,14 @@ match_object(Tid, Ts, Tab, Pat, LockKind)
 match_object(_Tid, _Ts, Tab, Pat, _LockKind) ->
     abort({bad_type, Tab, Pat}).
 
+add_written_index(Store, Pos, Tab, Key, Objs) when is_integer(Pos) ->
+    Pat = setelement(Pos, val({Tab, wild_pattern}), Key),
+    add_written_match(Store, Pat, Tab, Objs);
+add_written_index(Store, Pos, Tab, Key, Objs) when is_tuple(Pos) ->
+    IxF = mnesia_index:index_vals_f(val({Tab, storage_type}), Tab, Pos),
+    Ops = find_ops(Store, Tab, '_'),
+    add_ix_match(Ops, Objs, IxF, Key, val({Tab, setorbag})).
+
 add_written_match(S, Pat, Tab, Objs) ->
     Ops = find_ops(S, Tab, Pat),
     FixedRes = add_match(Ops, Objs, val({Tab, setorbag})),
@@ -1286,6 +1295,42 @@ add_match([{_Oid, Val, write}|R], Objs, bag) ->
 add_match([{Oid, Val, write}|R], Objs, set) ->
     add_match(R, [Val | deloid(Oid,Objs)],set).
 
+add_ix_match([], Objs, _IxF, _Key, _Type) ->
+    Objs;
+add_ix_match(Written, Objs, IxF, Key, ordered_set) ->
+    %% Must use keysort which is stable
+    add_ordered_match(lists:keysort(1,ix_filter(IxF,Key,Written)), Objs, []);
+add_ix_match([{Oid, _, delete}|R], Objs, IxF, Key, Type) ->
+    add_ix_match(R, deloid(Oid, Objs), IxF, Key, Type);
+add_ix_match([{_Oid, Val, delete_object}|R], Objs, IxF, Key, Type) ->
+    case ix_match(Val, IxF, Key) of
+        true ->
+            add_ix_match(R, lists:delete(Val, Objs), IxF, Key, Type);
+        false ->
+            add_ix_match(R, Objs, IxF, Key, Type)
+    end;
+add_ix_match([{_Oid, Val, write}|R], Objs, IxF, Key, bag) ->
+    case ix_match(Val, IxF, Key) of
+        true ->
+            add_ix_match(R, [Val | lists:delete(Val, Objs)], IxF, Key, bag);
+        false ->
+            add_ix_match(R, Objs, IxF, Key, bag)
+    end;
+add_ix_match([{Oid, Val, write}|R], Objs, IxF, Key, set) ->
+    case ix_match(Val, IxF, Key) of
+        true ->
+            add_ix_match(R, [Val | deloid(Oid,Objs)],IxF,Key,set);
+        false ->
+            add_ix_match(R, Objs, IxF, Key, set)
+    end.
+
+ix_match(Val, IxF, Key) ->
+    lists:member(Key, IxF(Val)).
+
+ix_filter(IxF, Key, Objs) ->
+    [Obj || Obj <- Objs,
+            ix_match(Obj, IxF, Key)].
+
 %% For ordered_set only !!
 add_ordered_match(Written = [{{_, Key}, _, _}|_], [Obj|Objs], Acc)
   when Key > element(2, Obj) ->
@@ -1624,6 +1669,16 @@ index_match_object(Tid, Ts, Tab, Pat, Attr, LockKind)
 	    dirty_index_match_object(Tab, Pat, Attr); % Should be optimized?
 	tid ->
 	    case mnesia_schema:attr_tab_to_pos(Tab, Attr) of
+                {_} ->
+                    case LockKind of
+                        read ->
+			    Store = Ts#tidstore.store,
+			    mnesia_locker:rlock_table(Tid, Store, Tab),
+			    Objs = dirty_match_object(Tab, Pat),
+			    add_written_match(Store, Pat, Tab, Objs);
+                        _ ->
+                            abort({bad_type, Tab, LockKind})
+                    end;
 		Pos when Pos =< tuple_size(Pat) ->
 		    case LockKind of
 			read ->
@@ -1671,8 +1726,8 @@ index_read(Tid, Ts, Tab, Key, Attr, LockKind)
 			false ->
 			    Store = Ts#tidstore.store,
 			    Objs = mnesia_index:read(Tid, Store, Tab, Key, Pos),
-			    Pat = setelement(Pos, val({Tab, wild_pattern}), Key),
-			    add_written_match(Store, Pat, Tab, Objs);
+                            add_written_index(
+                              Ts#tidstore.store, Pos, Tab, Key, Objs);
 			true ->
 			    abort({bad_type, Tab, Attr, Key})
 		    end;
@@ -1907,6 +1962,8 @@ dirty_index_match_object(Pat, _Attr) ->
 dirty_index_match_object(Tab, Pat, Attr)
   when is_atom(Tab), Tab /= schema, is_tuple(Pat), tuple_size(Pat) > 2 ->
     case mnesia_schema:attr_tab_to_pos(Tab, Attr) of
+        {_} ->
+            dirty_match_object(Tab, Pat);
 	Pos when Pos =< tuple_size(Pat) ->
 	    case has_var(element(2, Pat)) of
 		false ->
@@ -2681,7 +2738,7 @@ del_table_index(Tab, Ix) ->
 
 -spec transform_table(Tab::table(), Fun, [Attr]) -> t_result(ok) when
       Attr :: atom(),
-      Fun:: fun((Record::tuple()) -> Transformed::tuple()).
+      Fun:: fun((Record::tuple()) -> Transformed::tuple()) | ignore.
 transform_table(Tab, Fun, NewA) ->
     try val({Tab, record_name}) of
 	OldRN -> mnesia_schema:transform_table(Tab, Fun, NewA, OldRN)
@@ -2692,7 +2749,7 @@ transform_table(Tab, Fun, NewA) ->
 -spec transform_table(Tab::table(), Fun, [Attr], RecName) -> t_result(ok) when
       RecName :: atom(),
       Attr :: atom(),
-      Fun:: fun((Record::tuple()) -> Transformed::tuple()).
+      Fun:: fun((Record::tuple()) -> Transformed::tuple()) | ignore.
 transform_table(Tab, Fun, NewA, NewRN) ->
     mnesia_schema:transform_table(Tab, Fun, NewA, NewRN).
 
